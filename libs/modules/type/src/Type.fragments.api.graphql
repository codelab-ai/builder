#
# Fields and Types
#
fragment __Field on Field {
  id
  key
  name
  typeId
  description
}

fragment __ArrayType on ArrayType {
  id
  name
  typeId
}

fragment __EnumTypeValue on EnumTypeValue {
  id
  name
  value
}

fragment __EnumType on EnumType {
  id
  name
  allowedValues {
    ...__EnumTypeValue
  }
}

fragment __PrimitiveType on PrimitiveType {
  id
  name
  primitiveKind
}

fragment __Type on Type {
  __typename
  id
  name
  ... on ArrayType {
    ...__ArrayType
  }
  ... on EnumType {
    ...__EnumType
  }
  # Do not get the full interface fragment, because it will cause a recursion
  # The types are available in the root typeCollection.types, we can get it from there by id
  ... on Interface {
    ...__InterfaceWithoutTypes
  }
  ... on PrimitiveType {
    ...__PrimitiveType
  }
}

# Type, but without the recursion
fragment __TypeShallow on Type {
  __typename
  ... on ArrayType {
    id
  }
  ... on EnumType {
    ...__EnumType
  }
  ... on Interface {
    id
  }
  ... on PrimitiveType {
    ...__PrimitiveType
  }
}

#
# Interface
#
fragment __InterfaceWithoutFields on Interface {
  id
  name
}

fragment __InterfaceWithoutTypes on Interface {
  ...__InterfaceWithoutFields
  fieldCollection {
    ...__FieldCollectionWithoutTypes
    types {
      ...__TypeShallow
    }
  }
}

fragment __FieldCollectionWithoutTypes on FieldCollection {
  fields {
    ...__Field
  }
}

fragment __FieldCollection on FieldCollection {
  ...__FieldCollectionWithoutTypes
  types {
    ...__Type
  }
}

# Full Interface
fragment __Interface on Interface {
  ...__InterfaceWithoutFields
  fieldCollection {
    ...__FieldCollection
  }
}
