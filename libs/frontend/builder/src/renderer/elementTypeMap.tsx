import { Icon } from '@ant-design/compatible'
import { AtomType } from '@codelab/codegen/graphql'
import dynamic from 'next/dynamic'
import React from 'react'
import GridLayout, {
  Responsive as ResponsiveGrid,
  WidthProvider,
} from 'react-grid-layout'

const ResponsiveGridLayout = WidthProvider(ResponsiveGrid)

/**
 * A map of VertexTypes to their corresponding React components.
 * When adding a new vertex type, add the corresponding mapping here
 */
export const elementTypeMap: Record<
  AtomType,
  React.ComponentType<any> | string
> = {
  //
  // HTML:
  [AtomType.ReactFragment]: React.Fragment,
  [AtomType.HtmlDiv]: 'div',
  [AtomType.HtmlSpan]: 'span',
  [AtomType.HtmlA]: 'a',
  [AtomType.HtmlP]: 'p',
  [AtomType.HtmlVideo]: 'video',
  [AtomType.HtmlUList]: 'ul',
  [AtomType.HtmlTrack]: 'track',
  [AtomType.HtmlTitle]: 'title',
  [AtomType.HtmlTime]: 'time',
  [AtomType.HtmlTextarea]: 'textarea',
  [AtomType.HtmlTemplate]: 'template',
  [AtomType.HtmlTableRow]: 'tr',
  [AtomType.HtmlTable]: 'table',
  [AtomType.HtmlTableCol]: 'col',
  [AtomType.HtmlTableCell]: 'td',
  [AtomType.HtmlTableCaption]: 'caption',
  [AtomType.HtmlStyle]: 'style',
  [AtomType.HtmlSpan]: 'span',
  [AtomType.HtmlSource]: 'source',
  [AtomType.HtmlSelect]: 'select',
  [AtomType.HtmlQuote]: 'blockquote',
  [AtomType.HtmlProgress]: 'progress',
  [AtomType.HtmlPre]: 'pre',
  [AtomType.HtmlPicture]: 'picture',
  [AtomType.HtmlParam]: 'param',
  [AtomType.HtmlOutput]: 'output',
  [AtomType.HtmlOption]: 'option',
  [AtomType.HtmlOptgroup]: 'optgroup',
  [AtomType.HtmlObject]: 'object',
  [AtomType.HtmlOList]: 'ol',
  [AtomType.HtmlMeter]: 'meter',
  [AtomType.HtmlMeta]: 'meta',
  [AtomType.HtmlMap]: 'map',
  [AtomType.HtmlLink]: 'link',
  [AtomType.HtmlLegend]: 'legend',
  [AtomType.HtmlLabel]: 'label',
  [AtomType.HtmlLi]: 'li',
  [AtomType.HtmlInput]: 'input',
  [AtomType.HtmlImage]: 'img',
  [AtomType.HtmlIframe]: 'iframe',
  [AtomType.HtmlH1]: 'h1',
  [AtomType.HtmlH2]: 'h2',
  [AtomType.HtmlH3]: 'h3',
  [AtomType.HtmlH4]: 'h4',
  [AtomType.HtmlH5]: 'h5',
  [AtomType.HtmlH6]: 'h6',
  [AtomType.HtmlHead]: 'head',
  [AtomType.HtmlHr]: 'hr',
  [AtomType.HtmlFrameset]: 'frameset',
  [AtomType.HtmlFrame]: 'frame',
  [AtomType.HtmlForm]: 'form',
  [AtomType.HtmlFont]: 'font',
  [AtomType.HtmlFieldset]: 'fieldset',
  [AtomType.HtmlEmbed]: 'embed',
  [AtomType.HtmlDiv]: 'div',
  [AtomType.HtmlDialog]: 'dialog',
  [AtomType.HtmlDetails]: 'details',
  [AtomType.HtmlDatalist]: 'datalist',
  [AtomType.HtmlData]: 'data',
  [AtomType.HtmlDList]: 'dl',
  [AtomType.HtmlCanvas]: 'canvas',
  [AtomType.HtmlButton]: 'button',
  [AtomType.HtmlBase]: 'base',
  [AtomType.HtmlBr]: 'br',
  [AtomType.HtmlAudio]: 'audio',
  [AtomType.HtmlArea]: 'area',
  //
  // Antd:
  [AtomType.AntDesignIcon]: Icon,
  [AtomType.AntDesignMenu]: dynamic(() => import('antd/lib/menu')),
  [AtomType.AntDesignMenuItem]: dynamic(() => import('antd/lib/menu/MenuItem')),
  [AtomType.AntDesignMenuItemGroup]: dynamic(() =>
    import('antd/lib/menu').then((mod) => mod.default.ItemGroup),
  ),
  [AtomType.AntDesignMenuSubMenu]: dynamic(
    () => import('antd/lib/menu/SubMenu'),
  ),
  [AtomType.AntDesignGridCol]: dynamic(() => import('antd/lib/grid/col')),
  [AtomType.AntDesignGridRow]: dynamic(() => import('antd/lib/grid/row')),
  [AtomType.AntDesignCard]: dynamic(() => import('antd/lib/card')),
  [AtomType.AntDesignCardGrid]: dynamic(() => import('antd/lib/card/Grid')),
  [AtomType.AntDesignCardMeta]: dynamic(() => import('antd/lib/card/Meta')),
  [AtomType.AntDesignTypography]: dynamic(() => import('antd/lib/typography')),
  [AtomType.AntDesignTypographyTitle]: dynamic(
    () => import('antd/lib/typography/Title'),
  ),
  [AtomType.AntDesignTypographyText]: dynamic(
    () => import('antd/lib/typography/Text'),
  ),
  [AtomType.AntDesignTypographyParagraph]: dynamic(
    () => import('antd/lib/typography/Paragraph'),
  ),
  [AtomType.AntDesignAlert]: dynamic(() => import('antd/lib/alert')),
  [AtomType.AntDesignAffix]: dynamic(() => import('antd/lib/affix')),
  [AtomType.AntDesignAutoComplete]: dynamic(
    () => import('antd/lib/auto-complete'),
  ),
  [AtomType.AntDesignButton]: dynamic(() => import('antd/lib/button')),
  [AtomType.AntDesignBreadcrumb]: dynamic(() => import('antd/lib/breadcrumb')),
  [AtomType.AntDesignBreadcrumbItem]: dynamic(
    () => import('antd/lib/breadcrumb'),
  ),
  [AtomType.AntDesignDropdown]: dynamic(() => import('antd/lib/dropdown')),
  // [AtomType.AntDesignPageContainer]: dynamic(() => import('antd/lib/page')),
  [AtomType.AntDesignForm]: dynamic(() => import('antd/lib/form')),
  [AtomType.AntDesignFormItem]: dynamic(() => import('antd/lib/form/FormItem')),
  [AtomType.AntDesignFormList]: dynamic(() => import('antd/lib/form/FormList')),
  [AtomType.AntDesignCheckbox]: dynamic(() => import('antd/lib/checkbox')),
  [AtomType.AntDesignInput]: dynamic(() => import('antd/lib/input')),
  [AtomType.AntDesignInputNumber]: dynamic(
    () => import('antd/lib/input-number'),
  ),
  [AtomType.AntDesignSelect]: dynamic(() => import('antd/lib/select')),
  [AtomType.AntDesignSelectOption]: dynamic(() =>
    import('antd/lib/select').then((mod) => mod.default.Option),
  ),
  [AtomType.AntDesignRglContainer]: GridLayout,
  [AtomType.AntDesignRglItem]: 'div',
  [AtomType.AntDesignRglResponsiveContainer]: ResponsiveGridLayout,
  [AtomType.AntDesignProvider]: '',
  [AtomType.AntDesignModal]: dynamic(() => import('antd/lib/modal')),
  [AtomType.AntDesignRadioGroup]: dynamic(() => import('antd/lib/radio/group')),
  [AtomType.AntDesignRadio]: dynamic(() => import('antd/lib/radio')),
  [AtomType.AntDesignRate]: dynamic(() => import('antd/lib/rate')),
  [AtomType.AntDesignSlider]: dynamic(() => import('antd/lib/slider') as any),
  [AtomType.AntDesignSwitch]: dynamic(() => import('antd/lib/switch')),
  [AtomType.AntDesignSpace]: dynamic(() => import('antd/lib/space')),
  [AtomType.AntDesignDatePicker]: dynamic(() => import('antd/lib/date-picker')),
  [AtomType.AntDesignDivider]: dynamic(() => import('antd/lib/divider')),
  [AtomType.AntDesignPagination]: dynamic(() => import('antd/lib/pagination')),
  [AtomType.AntDesignPageHeader]: dynamic(() => import('antd/lib/page-header')),
  [AtomType.AntDesignBadge]: dynamic(() => import('antd/lib/badge')),
  [AtomType.AntDesignAvatar]: dynamic(() => import('antd/lib/avatar')),
  [AtomType.AntDesignComment]: dynamic(() => import('antd/lib/comment')),
  [AtomType.AntDesignCalendar]: dynamic(() => import('antd/lib/calendar')),
  [AtomType.AntDesignDescriptions]: dynamic(
    () => import('antd/lib/descriptions'),
  ),
  [AtomType.AntDesignDescriptionsItem]: dynamic(
    () => import('antd/lib/descriptions/Item'),
  ),
  [AtomType.AntDesignEmpty]: dynamic(() => import('antd/lib/empty')),
  [AtomType.AntDesignTimeline]: dynamic(() => import('antd/lib/timeline')),
  [AtomType.AntDesignTimelineItem]: dynamic(
    () => import('antd/lib/timeline/TimelineItem'),
  ),
  [AtomType.AntDesignTabs]: dynamic(() => import('antd/lib/tabs')),
  [AtomType.AntDesignTabsTabPane]: dynamic(() =>
    import('antd/lib/tabs').then((mod) => mod.default.TabPane),
  ),
  [AtomType.AntDesignStatistic]: dynamic(() => import('antd/lib/statistic')),
  [AtomType.AntDesignTooltip]: dynamic(() => import('antd/lib/tooltip')),
  [AtomType.AntDesignTag]: dynamic(() => import('antd/lib/tag')),
  [AtomType.AntDesignTree]: dynamic(() => import('antd/lib/tree')),
  [AtomType.AntDesignDrawer]: dynamic(() => import('antd/lib/drawer')),
  [AtomType.AntDesignProgress]: dynamic(
    () => import('antd/lib/progress') as any,
  ),
  [AtomType.AntDesignResult]: dynamic(() => import('antd/lib/result')),
  [AtomType.AntDesignSpin]: dynamic(() => import('antd/lib/spin')),
  [AtomType.AntDesignSkeleton]: dynamic(() => import('antd/lib/skeleton')),
  [AtomType.AntDesignAnchor]: dynamic(() => import('antd/lib/anchor')),
  [AtomType.AntDesignAnchorLink]: dynamic(
    () => import('antd/lib/anchor/AnchorLink'),
  ),
  [AtomType.AntDesignBackTop]: dynamic(() => import('antd/lib/back-top')),
  [AtomType.AntDesignConfigProvider]: dynamic(
    () => import('antd/lib/config-provider'),
  ),
  [AtomType.AntDesignPopconfirm]: dynamic(() => import('antd/lib/popconfirm')),
  [AtomType.AntDesignTransfer]: 'null',
  // [AtomType.AntDesignTransfer]: Transfer as dynamic(() => import('any'),
  [AtomType.AntDesignTreeSelect]: dynamic(() => import('antd/lib/tree-select')),
  [AtomType.AntDesignTreeNode]: dynamic(() =>
    import('antd/lib/tree-select').then((mod) => mod.default.TreeNode),
  ),
  [AtomType.AntDesignTimePicker]: dynamic(() => import('antd/lib/time-picker')),
  [AtomType.AntDesignUpload]: dynamic(() => import('antd/lib/upload')),
  [AtomType.AntDesignSteps]: dynamic(() => import('antd/lib/steps')),
  [AtomType.AntDesignStepsStep]: dynamic(() =>
    import('antd/lib/steps').then((mod) => mod.default.Step),
  ),
  [AtomType.AntDesignCollapse]: dynamic(() => import('antd/lib/collapse')),
  [AtomType.AntDesignCollapsePanel]: dynamic(
    () => import('antd/lib/collapse/CollapsePanel'),
  ),
  [AtomType.AntDesignCarousel]: dynamic(() => import('antd/lib/carousel')),
  [AtomType.AntDesignList]: dynamic(() => import('antd/lib/list')),
  [AtomType.AntDesignListItem]: dynamic(() => import('antd/lib/list/Item')),
  [AtomType.AntDesignListItemMeta]: dynamic(() =>
    import('antd/lib/list/Item').then((mod) => mod.default.Meta),
  ),
  [AtomType.AntDesignMentions]: dynamic(() => import('antd/lib/mentions')),
  [AtomType.AntDesignMentionsOption]: dynamic(() =>
    import('antd/lib/mentions').then((mod) => mod.Option),
  ),
  [AtomType.AntDesignLayout]: dynamic(() => import('antd/lib/layout')),
  [AtomType.AntDesignLayoutHeader]: dynamic(() =>
    import('antd/lib/layout').then((mod) => mod.default.Header),
  ),
  [AtomType.AntDesignLayoutSider]: dynamic(
    () => import('antd/lib/layout/Sider'),
  ),
  [AtomType.AntDesignLayoutContent]: dynamic(() =>
    import('antd/lib/layout').then((mod) => mod.default.Content),
  ),
  [AtomType.AntDesignLayoutFooter]: dynamic(() =>
    import('antd/lib/layout').then((mod) => mod.default.Footer),
  ),
  [AtomType.AntDesignCascader]: '',
  // [AtomType.AntDesignCascader]: Cascader as dynamic(() => import('any'),
  [AtomType.AntDesignPopover]: dynamic(() => import('antd/lib/popover')),
  [AtomType.AntDesignTable]: dynamic(() => import('antd/lib/table')),
  [AtomType.AntDesignRenderComponent]: '',
  [AtomType.AntDesignRenderContainer]: '',
  [AtomType.AntDesignMapper]: '',
  [AtomType.AntDesignProvider]: '',
  [AtomType.AntDesignFormItemHook]: '',
  [AtomType.AntDesignPageContainer]: '',
}
