import { Theme as AntDTheme } from '@rjsf/antd'
import { withTheme } from '@rjsf/core'
import { Button } from 'antd'
import React, { ReactElement } from 'react'
import { setSubmitControllerRef } from './JsonSchemaForm-ref'
import { JsonSchemaFormProps } from './JsonSchemaForm.d'

const ThemedForm = withTheme(AntDTheme)

/** Generic form event containing the current form values  */

/**
 * A form that's generated by a JSON schema.
 * Note: the form doesn't keep any state. If you don't pass formData and onChange and manage the state in another place, it will reset the values on every render
 */
export const JsonSchemaForm = <TData extends object>({
  submitControllerRef,
  hideSubmitButton,
  schema,
  onSubmit = () => null,
  onChange = () => null,
  formData,
  submitButtonProps = {},
  rjsfFormProps = {},
}: JsonSchemaFormProps<TData>): ReactElement => {
  return (
    <ThemedForm
      schema={schema}
      onSubmit={(e) => onSubmit({ data: e.formData })}
      onChange={(e) => onChange({ data: e.formData })}
      formData={formData}
      {...rjsfFormProps}
    >
      {/* This button exists because by default the Form from rjsf includes a submit button and you can't configure it, only replace it by a custom one.
       Since we might not want to use it and we want to submit  using the submitController, we need a way to hide it.
       So we need to add our own button and hide it with display: none, it works
       */}
      <Button
        htmlType="submit"
        style={{
          ...submitButtonProps?.style,
          ...(hideSubmitButton ? { display: 'none' } : {}),
        }}
        // Expose only a submit controller ref, so that we don't have to expose the whole button ref
        ref={setSubmitControllerRef(submitControllerRef)}
        {...submitButtonProps}
      >
        Submit
      </Button>
    </ThemedForm>
  )
}

export default JsonSchemaForm
