import { Theme as AntDTheme } from '@rjsf/antd'
import { withTheme } from '@rjsf/core'
import { Button } from 'antd'
import { JSONSchema7 } from 'json-schema'
import React, { ReactElement, useState } from 'react'
import { setSubmitControllerRef } from './Form-jsonSchema--ref'
import { JsonSchemaFormProps } from './Form-jsonSchema--types'
import { callbackWithParams } from 'libs/frontend/src/utils'

const ThemedForm = withTheme(AntDTheme)

/**
 * A form that's generated by a JSON schema.
 * Note: the form doesn't keep any state. If you don't pass formData and onChange and manage the state in another place, it will reset the values on every render
 */
export const JsonSchemaForm = <TData extends object>({
  submitRef,
  hideSubmitButton,
  onSubmitSuccess,
  onSubmitError,
  widgets,
  schema,
  onSubmit = () => null,
  initialFormData,
  submitButtonProps = {},
  rjsfFormProps = {},
  saveOnChange = false,
  ...props
}: JsonSchemaFormProps<TData>): ReactElement => {
  const [localFormData, setLocalFormData] = useState<TData>(initialFormData)

  return (
    <ThemedForm
      widgets={widgets}
      schema={schema as JSONSchema7}
      onSubmit={(e) => {
        console.log(e.formData.props)

        return onSubmit({ data: e.formData })
          .then((r: any) => {
            callbackWithParams(onSubmitSuccess, r)

            // setLocalFormData({ ...initialFormData })
          })
          .catch((err: any) => {
            callbackWithParams(onSubmitError, err)
          })
      }}
      onChange={(e) => {
        console.log(e.formData.props)
        setLocalFormData(e.formData)

        if (saveOnChange) {
          onSubmit({ data: e.formData })
        }
      }}
      formData={localFormData}
      {...rjsfFormProps}
      {...props}
    >
      {/* This button exists because by default the Form from rjsf includes a submit button and you can't configure it, only replace it by a custom one.
       Since we might not want to use it and we want to submit  using the submitController, we need a way to hide it.
       So we need to add our own button and hide it with display: none, it works
       */}
      <Button
        htmlType="submit"
        style={{
          ...submitButtonProps?.style,
          ...(hideSubmitButton ? { display: 'none' } : {}),
        }}
        // Expose only a submit controller ref, so that we don't have to expose the whole button ref
        ref={setSubmitControllerRef(submitRef)}
        {...submitButtonProps}
      >
        Submit
      </Button>
    </ThemedForm>
  )
}
