import { Theme as AntDTheme } from '@rjsf/antd'
import { FormProps as RjsfFormProps, withTheme } from '@rjsf/core'
import { Button } from 'antd'
import { ButtonProps } from 'antd/lib/button'
import { JSONSchema7 } from 'json-schema'
import React, { ReactElement } from 'react'

const ThemedForm = withTheme(AntDTheme)

/** This object is used to control form submission imperatively */
export interface SubmitController {
  submit: () => void
}

/** Generic form event containing the current form values  */
export interface FormEvent<T> {
  data: T
}

const setSubmitControllerRef = (
  submitBtnRef:
    | React.MutableRefObject<SubmitController | undefined>
    | undefined,
) => (sbtn: HTMLButtonElement | null) => {
  if (!submitBtnRef) return

  // eslint-disable-next-line no-param-reassign
  submitBtnRef.current = sbtn
    ? {
        submit: () => sbtn.click(),
      }
    : undefined
}

export interface FormProps<T extends object> {
  /** Schema used for form generation */
  schema: JSONSchema7
  /** Called when form is submitted */
  onSubmit: (submitEvent: FormEvent<T>) => any
  /** Called when any of the form values have changed */
  onChange: (changeEvent: FormEvent<T>) => any
  /** Use this to control the form data */
  formData: T
  /** Pass false to hide the submit button inside the form. Use the submitControllerRef to control form submission */
  hideSubmitButton?: boolean
  /** Use this to be able to hide the submit button and get a controller, which can trigger form submit */
  submitControllerRef?: React.MutableRefObject<SubmitController | undefined>
  /** Props that get passed down to the submit button */
  submitButtonProps?: Omit<ButtonProps, 'htmlType' | 'ref'>
  /** Props that get passed down to the RJSFForm component */
  rjsfFormProps?: Omit<RjsfFormProps<T>, keyof FormProps<T>>
}

/**
 * A form that's generated by a JSON schema.
 * Note: the form doesn't keep any state. If you don't pass formData and onChange and manage the state in another place, it will reset the values on every render
 */
const GeneratedForm = <T extends object>({
  submitControllerRef,
  hideSubmitButton,
  schema,
  onSubmit,
  formData,
  onChange,
  submitButtonProps = {},
  rjsfFormProps = {},
}: FormProps<T>): ReactElement => {
  return (
    <ThemedForm
      schema={schema}
      onSubmit={(e) => {
        if (onSubmit) onSubmit({ data: e.formData })
      }}
      onChange={(e) => {
        if (onChange) onChange({ data: e.formData })
      }}
      formData={formData}
      {...rjsfFormProps}
    >
      {/* This button exists because by default the Form from rjsf includes a submit button and you can't configure it, only replace it by a custom one.
       Since we might not want to use it and we want to submit  using the submitController, we need a way to hide it.
       So we need to add our own button and hide it with display: none, it works
       */}
      <Button
        htmlType="submit"
        style={{
          ...submitButtonProps?.style,
          ...(hideSubmitButton ? { display: 'none' } : {}),
        }}
        // Expose only a submit controller ref, so that we don't have to expose the whole button ref
        ref={setSubmitControllerRef(submitControllerRef)}
        {...submitButtonProps}
      >
        Submit
      </Button>
    </ThemedForm>
  )
}

export default GeneratedForm
