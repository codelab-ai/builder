import { join } from 'path'
import { Tree } from '@angular-devkit/schematics'
import { SchematicTestRunner } from '@angular-devkit/schematics/testing'
import { createEmptyWorkspace } from '@nrwl/workspace/testing'
import * as requireFromString from 'require-from-string'
import { NestSchematicSchema } from './schema'

const SCHEMATIC_NAME = 'nest-lib'

describe('@codelab/schematics:nest-lib', () => {
  let appTree: Tree
  const options: NestSchematicSchema = { name: 'test' }

  const testRunner = new SchematicTestRunner(
    '@codelab/schematics',
    join(__dirname, '../../../../collection.json'),
  )

  beforeEach(() => {
    appTree = createEmptyWorkspace(Tree.empty())
  })

  it('should run successfully', async () => {
    await expect(
      testRunner
        .runSchematicAsync(SCHEMATIC_NAME, options, appTree)
        .toPromise(),
    ).resolves.not.toThrowError()
  })

  it('should overwrite package .eslintrc generated by @nrwl/react:library', async () => {
    appTree = await testRunner
      .runSchematicAsync(SCHEMATIC_NAME, options, appTree)
      .toPromise()

    const file = appTree.read('/libs/test/.eslintrc.js')?.toString() ?? ''
    const eslintrcContents = requireFromString(file)
    const eslintrc = appTree.exists('/libs/test/.eslintrc.js')

    expect(eslintrc).toBeTruthy()
    expect(eslintrcContents.extends).toBe('../../.eslintrc.js')
  })

  it('should remove root .eslintrc generated by @nrwl/nest:library', async () => {
    appTree = await testRunner
      .runSchematicAsync(SCHEMATIC_NAME, options, appTree)
      .toPromise()
    const eslintrc = appTree.exists('/.eslintrc')

    expect(eslintrc).toBeFalsy()
  })
})
