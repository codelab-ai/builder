import { left, right } from 'fp-ts/lib/Either'
import { <%= toUpperCase(moduleName) %>RepositoryPort } from '../../adapters/<%= toUpperCase(moduleName) %>RepositoryPort'
import { <%= toUpperCase(moduleName) %> } from '../../domain/<%= toLowerCase(moduleName) %>'
import { <%= useCaseName %>Errors } from '../useCases/<%= toLowerCase(useCaseName) %>/<%= useCaseName %>Errors'
import { <%= useCaseName %>Request } from '../useCases/<%= toLowerCase(useCaseName) %>/<%= useCaseName %>Request'
import { <%= useCaseName %>Response } from '../useCases/<%= toLowerCase(useCaseName) %>/<%= useCaseName %>Response'
import { <%= useCaseName %>UseCase } from '../useCases/<%= toLowerCase(useCaseName) %>/<%= useCaseName %>UseCase'
import { Result } from '@codelab/backend'


export class <%= useCaseName %>Service implements <%= useCaseName %>UseCase {
  constructor(private readonly <%= toLowerCase(moduleName) %>Repository: <%= toUpperCase(moduleName) %>RepositoryPort) {}

  async execute(request: <%= useCaseName %>Request): Promise<<%= useCaseName %>Response> {
    // const <%= toLowerCase(moduleName) %> = <%= toUpperCase(moduleName) %>.create(request)

    // const <%= toLowerCase(moduleName) %>AlreadyExists = await this.<%= toLowerCase(moduleName) %>Repository.exists({
    //   email: user.email.toString(),
    // })

    // if (<%= toLowerCase(moduleName) %>AlreadyExists) {
    //   return left(
    //     new <%= useCaseName %>Errors.DemoError('some error'),
    //   )
    // }

    // const persisted<%= toUpperCase(moduleName) %> = await this.<%= toLowerCase(moduleName) %>Repository.<%= toLowerCase(useCaseName) %>(<%= toLowerCase(moduleName) %>)

    // return right(Result.ok(persisted<%= toUpperCase(moduleName) %>))
  }
}
