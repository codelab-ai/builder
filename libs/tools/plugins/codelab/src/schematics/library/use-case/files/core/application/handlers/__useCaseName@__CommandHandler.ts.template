import { Inject } from '@nestjs/common'
import { <%= UseCaseName %>Command } from '../commands/<%= UseCaseName %>Command'
import { CommandHandler, ICommandHandler } from '@nestjs/cqrs'
import { fold } from 'fp-ts/lib/Either'
import { <%= ModuleName %>DITokens } from '../../../framework/<%= ModuleName %>DITokens'
import { <%= UseCaseName %>UseCase } from '../useCases/<%=useCaseName%>/<%= UseCaseName %>UseCase'
import { Result } from '@codelab/backend'
import { <%= ModuleName %> } from '../../domain/<%= moduleName %>'

@CommandHandler(<%= UseCaseName %>Command)
export class <%= UseCaseName %>CommandHandler
  implements ICommandHandler<<%= UseCaseName %>Command> {
  constructor(
    @Inject(<%= ModuleName %>DITokens.<%= UseCaseName %>UseCase)
    private readonly service: <%= UseCaseName %>UseCase,
  ) {}

  public async execute({ request }: <%= UseCaseName %>Command): Promise<<%= ModuleName %>> {
    const <%= useCaseName%>Results = await this.service.execute(request)

    return fold(
      (errors) => {
        throw errors
      },
      (results: Result<<%= ModuleName %>>) => results.value,
    )(<%= useCaseName%>Results)
  }
}
