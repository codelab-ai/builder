import { Inject } from '@nestjs/common'
import { <%= useCaseName %>Command } from '../commands/<%= useCaseName %>Command'
import { CommandHandler, ICommandHandler } from '@nestjs/cqrs'
import { fold } from 'fp-ts/lib/Either'
import { <%= toUpperCase(moduleName) %>DITokens } from '../../../framework/<%= toUpperCase(moduleName) %>DITokens'
import { <%= useCaseName %>UseCase } from '../useCases/<%=toLowerCase(useCaseName)%>/<%= useCaseName %>UseCase'
import { Result } from '@codelab/backend'
import { <%= toUpperCase(moduleName) %> } from '../../domain/<%= toLowerCase(moduleName) %>'

@CommandHandler(<%= useCaseName %>Command)
export class <%= useCaseName %>CommandHandler
  implements ICommandHandler<<%= useCaseName %>Command> {
  constructor(
    @Inject(<%= toUpperCase(moduleName) %>DITokens.<%= useCaseName %>UseCase)
    private readonly service: <%= useCaseName %>UseCase,
  ) {}

  public async execute({ request }: <%= useCaseName %>Command): Promise<<%= toUpperCase(moduleName) %>> {
    const <%= toLowerCase(useCaseName)%>Results = await this.service.execute(request)

    return fold(
      (errors) => {
        throw errors
      },
      (results: Result<<%= toUpperCase(moduleName) %>>) => results.value,
    )(<%= toLowerCase(useCaseName)%>Results)
  }
}
