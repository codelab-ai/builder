#
# We want to setup a multi-container pod, where our web service shared the same volume with nginx, so we can serve web assets
#
apiVersion: v1
kind: Namespace
metadata:
  name: codelab
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web
  namespace: codelab
spec:
  replicas: 1
  selector:
    matchLabels:
      app: web
  template:
    metadata:
      labels:
        app: web
    spec:
      containers:
        - name: frontend
          # imagePullPolicy: Always
          image: codelabai/codelab:0.01
          # ENTRYPOINT in Docker
          command: ['yarn', 'start:prod:web']
          env:
            # Can only be changed by `next start -p 3000 dist/apps/web`
            - name: WEB_PORT
              value: '3000'
            - name: NODE_ENV
              value: production
            - name: NEXT_PUBLIC_API_ORIGIN
              value: http://localhost:4000
            - name: NEXT_PUBLIC_API_PATHNAME
              value: api/v1
          ports:
            - name: http
              containerPort: 3000
          # volumeMounts:
          #   - name: web-volume
          #     mountPath: /home/codelab/app
          resources:
            # Running container is not allowed to pass the set limit
            limits:
              memory: 512Mi
              cpu: '0.5'
            # Used by scheduler to determine which node to place the Pod on, think of it as minimum required resource
            requests:
              memory: 256Mi
              cpu: '0.2'
        - name: web-server
          image: nginx:1.19.3
          ports:
            - containerPort: 8080
          volumeMounts:
            - name: nginx-conf
              mountPath: /etc/nginx/nginx.conf # mount nginx-conf volumn to /etc/nginx
              readOnly: true
              subPath: nginx.conf
            # - name: web-volume
            #   mountPath: /etc/share/nginx
            #   # subPath: nginx.conf
            # - name: web-volume
            #   mountPath: /var/log/nginx
      volumes:
        # - name: web-volume
        #   persistentVolumeClaim:
        #     claimName: csi-pvc
        # https://stackoverflow.com/questions/61266532/configmap-mounted-on-persistent-volume-claims
        - name: nginx-conf
          configMap:
            name: nginx-conf # place ConfigMap `nginx-conf` on /etc/nginx
            items:
              - key: nginx.conf
                path: nginx.conf
        # - name: log
        #   emptyDir: {}
---
# Service
#
# A Service enables network access to a set of Pods in Kubernetes.
#
# Services select Pods based on their labels. When a network request is made to the service, it selects all Pods in the cluster matching the service's selector, chooses one of them, and forwards the network request to it.
apiVersion: v1
kind: Service
metadata:
  name: web
  namespace: codelab
spec:
  ports:
    - name: http
      port: 80 # Exposes within cluster
      targetPort: 80 # Target from external
  selector:
    app: web
# ---
# apiVersion: v1
# # https://gist.github.com/petitviolet/d36f33d145d0bbf4b54eb187b79d0244
# kind: ConfigMap
# metadata:
#   name: nginx-conf
#   namespace: codelab
# data:
#   nginx.conf: |
#     http {
#       upstream web {
#         server 127.0.0.1:3000;
#       }

#       server {
#         listen 80;
#         root /home/codelab/app/dist/apps/web;

#         location / {
#           proxy_pass http://web;
#         }
#       }
#     }

#     events {}
---
apiVersion: getambassador.io/v2
kind: Mapping
metadata:
  name: codelab-mapping
  namespace: codelab
spec:
  prefix: /web/
  # https://www.getambassador.io/docs/latest/topics/using/intro-mappings/
  #
  # Required format
  service: web.codelab
