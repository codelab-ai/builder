# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

interface Type {
  id: ID!
  name: String!
}

type DeleteResponse {
  affected: Int!
}

type App {
  id: ID!
  ownerId: String!
  name: String!
}

type ArrayType implements Type {
  id: ID!
  name: String!
  typeId: String!
}

type EnumTypeValue {
  id: ID!
  name: String
  value: String!
}

type EnumType implements Type {
  id: ID!
  name: String!
  allowedValues: [EnumTypeValue!]!
}

type SimpleType implements Type {
  id: ID!
  name: String!
  primitiveType: PrimitiveType!
}

enum PrimitiveType {
  String
  Integer
  Float
  Boolean
}

type Interface implements Type {
  id: ID!
  name: String!
  fieldCollection: FieldCollection!
}

type FieldCollection {
  fields: [Field!]!

  """Flattened array of all types that are used inside this interface"""
  types: [Type!]!
}

type Field {
  id: ID!
  key: String!
  name: String!
  description: String
  typeId: String!
  decorators: [Decorator!]!
  interface: Interface!
}

union Decorator = ArrayLengthValidator | MinMaxValidator | RequiredValidator

type ArrayLengthValidator {
  id: ID!
  minLength: Int
  maxLength: Int
}

type MinMaxValidator {
  id: ID!
  min: Int
  max: Int
}

type RequiredValidator {
  id: ID!
  isRequired: Boolean!
}

type Atom {
  id: ID!
  type: AtomType!
  label: String!
  propTypes: Interface!
}

enum AtomType {
  AntDesignAffix
  AntDesignAlert
  AntDesignAnchor
  AntDesignAnchorLink
  AntDesignAutoComplete
  AntDesignAvatar
  AntDesignBackTop
  AntDesignBadge
  AntDesignBreadcrumb
  AntDesignBreadcrumbItem
  AntDesignButton
  AntDesignCalendar
  AntDesignCard
  AntDesignCardGrid
  AntDesignCardMeta
  AntDesignCarousel
  AntDesignCascader
  AntDesignCheckbox
  AntDesignCollapse
  AntDesignCollapsePanel
  AntDesignComment
  AntDesignConfigProvider
  AntDesignDatePicker
  AntDesignDescriptions
  AntDesignDescriptionsItem
  AntDesignDivider
  AntDesignDrawer
  AntDesignDropdown
  AntDesignEmpty
  AntDesignForm
  AntDesignFormItem
  AntDesignFormItemHook
  AntDesignFormList
  AntDesignGridCol
  AntDesignGridRow
  AntDesignIcon
  AntDesignInput
  AntDesignInputNumber
  AntDesignLayout
  AntDesignLayoutContent
  AntDesignLayoutFooter
  AntDesignLayoutHeader
  AntDesignLayoutSider
  AntDesignList
  AntDesignListItem
  AntDesignListItemMeta
  AntDesignMapper
  AntDesignMentions
  AntDesignMentionsOption
  AntDesignMenu
  AntDesignMenuItem
  AntDesignMenuItemGroup
  AntDesignMenuSubMenu
  AntDesignModal
  AntDesignPageHeader
  AntDesignPageContainer
  AntDesignPagination
  AntDesignPopconfirm
  AntDesignPopover
  AntDesignProgress
  AntDesignProvider
  AntDesignRglContainer
  AntDesignRglItem
  AntDesignRglResponsiveContainer
  AntDesignRadio
  AntDesignRadioGroup
  AntDesignRate
  AntDesignRenderComponent
  AntDesignRenderContainer
  AntDesignResult
  AntDesignSelect
  AntDesignSelectOption
  AntDesignSkeleton
  AntDesignSlider
  AntDesignSpace
  AntDesignSpin
  AntDesignStatistic
  AntDesignSteps
  AntDesignStepsStep
  AntDesignSwitch
  AntDesignTable
  AntDesignTabs
  AntDesignTabsTabPane
  AntDesignTag
  AntDesignTimePicker
  AntDesignTimeline
  AntDesignTimelineItem
  AntDesignTooltip
  AntDesignTransfer
  AntDesignTree
  AntDesignTreeNode
  AntDesignTreeSelect
  AntDesignTypography
  AntDesignTypographyParagraph
  AntDesignTypographyText
  AntDesignTypographyTitle
  AntDesignUpload
  ReactFragment
  HtmlA
  HtmlP
  HtmlVideo
  HtmlUList
  HtmlTrack
  HtmlTitle
  HtmlTime
  HtmlTextarea
  HtmlTemplate
  HtmlTableRow
  HtmlTable
  HtmlTableCol
  HtmlTableCell
  HtmlTableCaption
  HtmlStyle
  HtmlSpan
  HtmlSource
  HtmlSelect
  HtmlQuote
  HtmlProgress
  HtmlPre
  HtmlPicture
  HtmlParam
  HtmlOutput
  HtmlOption
  HtmlOptgroup
  HtmlObject
  HtmlOList
  HtmlMeter
  HtmlMeta
  HtmlMap
  HtmlLink
  HtmlLegend
  HtmlLabel
  HtmlLi
  HtmlInput
  HtmlImage
  HtmlIframe
  HtmlH1
  HtmlH2
  HtmlH3
  HtmlH4
  HtmlH5
  HtmlH6
  HtmlHead
  HtmlHr
  HtmlFrameset
  HtmlFrame
  HtmlForm
  HtmlFont
  HtmlFieldset
  HtmlEmbed
  HtmlDiv
  HtmlDialog
  HtmlDetails
  HtmlDatalist
  HtmlData
  HtmlDList
  HtmlCanvas
  HtmlButton
  HtmlBase
  HtmlBr
  HtmlAudio
  HtmlArea
  HtmlFooter
  HtmlAside
  HtmlHeader
  HtmlMain
  HtmlNav
  HtmlSection
  HtmlCode
  HtmlEm
  HtmlI
  HtmlS
  HtmlSmall
  HtmlStrong
  HtmlSub
  HtmlSup
}

type Prop {
  id: ID!
  field: Field!
  value: PropValue
}

union PropValue = StringValue | IntValue | FloatValue | BooleanValue | ArrayValue | InterfaceValue | EnumTypeValue

type StringValue {
  id: ID!
  stringValue: String!
}

type IntValue {
  id: ID!
  intValue: Int!
}

type FloatValue {
  id: ID!
  floatValue: Float!
}

type BooleanValue {
  id: ID!
  booleanValue: Boolean!
}

type ArrayValue {
  id: ID!
  values: [PropValue!]!
}

type InterfaceValue {
  id: ID!
  props: [Prop!]!
}

"""Contains all nested props and values from the whole prop tree"""
type PropAggregate {
  rootProp: Prop!

  """
  All props that are descendant of this Prop, normalized to an array, including the root prop
  """
  props: [Prop!]!

  """
  All values that are descendant of this Prop, normalized to an array, including the root prop's value
  """
  values: [PropValue!]!
}

type UpsertPropsResponse {
  ok: Boolean!
}

type PageElement {
  id: ID!
  name: String!
  css: String
  atom: Atom
  props: [PropAggregate!]!
}

type PageElementLink {
  """The id of the source PageElement"""
  from: String!

  """The id of the target PageElement"""
  to: String!
  order: Int!
}

type PageElementRoot {
  id: ID!
  name: String!
  css: String
  atom: Atom
  props: [PropAggregate!]!

  """All descendant PageElements that are under this root, at any level"""
  descendants: [PageElement!]!

  """All the links connecting the descendant page elements"""
  links: [PageElementLink!]!
}

type Page {
  id: ID!
  name: String!
  app: App!
  rootElement: PageElementRoot!
}

type User {
  blocked: Boolean
  created_at: String
  email: String
  email_verified: Boolean
  family_name: String
  given_name: String
  last_ip: String
  last_login: String
  last_password_reset: String
  logins_count: Float
  multifactor: [String!]
  name: String
  nickname: String
  phone_number: String
  phone_verified: Boolean
  picture: String
  updated_at: String
  user_id: String
  username: String
}

type Query {
  getApp(input: GetAppInput!): App
  getApps: [App!]!
  getMe: User!
  getUsers(input: GetUsersInput): [User!]!
  getPages(input: GetPagesInput!): [Page!]!
  getPage(input: GetPageInput!): Page
  getPageElement(input: GetPageElementInput!): PageElement

  """
  Aggregates the requested page element and all of its descendant elements (infinitely deep) in the form of array of PageElement and array of PageElementLink
  """
  getPageElementRoot(input: GetPageElementRootInput!): PageElementRoot
  getAtoms: [Atom!]!
  getAtom(input: GetAtomInput!): Atom
  getAtomBy(input: GetAtomByInput!): Atom
  getInterface(input: GetInterfaceInput!): Interface
  getInterfaces: [Interface!]!
  getField(input: GetFieldInput!): Field
  getType(input: GetTypeInput!): Type
  getTypes(input: GetTypesInput): [Type!]!
  getProps(input: GetPropsInput!): [PropAggregate!]!
}

input GetAppInput {
  appId: String!
}

input GetUsersInput {
  page: Int!
  perPage: Int!
  query: String!
  sort: String!
}

input GetPagesInput {
  appId: String!
}

input GetPageInput {
  pageId: String!
}

input GetPageElementInput {
  pageElementId: String!
}

input GetPageElementRootInput {
  pageElementId: String!
}

input GetAtomInput {
  atomId: String!
}

input GetAtomByInput {
  byPageElement: AtomByPageElementFilter
}

input AtomByPageElementFilter {
  pageElementId: String!
}

input GetInterfaceInput {
  interfaceId: String!
}

input GetFieldInput {
  byInterface: FieldByInterfaceFilter
  byId: FieldByIdFilter
}

input FieldByInterfaceFilter {
  interfaceId: String!
  fieldKey: String!
}

input FieldByIdFilter {
  fieldId: String!
}

input GetTypeInput {
  typeId: String!
}

input GetTypesInput {
  byIds: TypesByIdsFilter
}

input TypesByIdsFilter {
  typeIds: [String!]!
}

input GetPropsInput {
  byPageElement: PropsByPageElementFilter
  byIds: PropsByIdsFilter
  byInterfaceValue: PropsByInterfaceValueId
}

input PropsByPageElementFilter {
  pageElementIds: [String!]!
  fieldId: String = null
}

input PropsByIdsFilter {
  propIds: [String!]!
}

input PropsByInterfaceValueId {
  interfaceValueId: String!
}

type Mutation {
  createApp(input: CreateAppInput!): App!
  updateApp(input: UpdateAppInput!): App!
  deleteApp(input: DeleteAppInput!): App!
  updateUser(input: UpdateUserInput!): User!
  deleteUser(input: DeleteUserInput!): Boolean!
  createPage(input: CreatePageInput!): Page!
  deletePage(input: DeletePageInput!): DeleteResponse!
  updatePage(input: UpdatePageInput!): Page!
  createPageElement(input: CreatePageElementInput!): PageElement!
  updatePageElement(input: UpdatePageElementInput!): PageElement!
  movePageElement(input: MovePageElementInput!): PageElement!

  """Deletes a page element and all the descending page elements"""
  deletePageElement(input: DeletePageElementInput!): DeleteResponse!
  createAtom(input: CreateAtomInput!): Atom!
  deleteAtom(input: DeleteAtomInput!): DeleteResponse!
  updateAtom(input: UpdateAtomInput!): Atom!
  createInterface(input: CreateInterfaceInput!): Interface!
  updateInterface(input: UpdateInterfaceInput!): Interface!
  createField(input: CreateFieldInput!): Field!
  updateField(input: UpdateFieldInput!): Field!
  deleteField(input: DeleteFieldInput!): DeleteResponse!
  createType(input: CreateTypeInput!): Type!
  updateEnumType(input: UpdateEnumTypeInput!): EnumType!
  updateSimpleType(input: UpdateSimpleTypeInput!): SimpleType!
  updateType(input: UpdateTypeInput!): Type!
  deleteType(input: DeleteTypeInput!): DeleteResponse!
  upsertProp(input: [UpsertPropsInput!]!): UpsertPropsResponse!
  deleteProp: DeleteResponse!
}

input CreateAppInput {
  name: String!
}

input UpdateAppInput {
  id: String!
  data: UpdateAppData!
}

input UpdateAppData {
  name: String!
}

input DeleteAppInput {
  appId: String!
}

input UpdateUserInput {
  userId: String!
  updateData: UpdateUserData!
}

input UpdateUserData {
  family_name: String
  given_name: String
  name: String
  nickname: String
  phone_number: String
  picture: String
  username: String
}

input DeleteUserInput {
  userId: String!
}

input CreatePageInput {
  name: String!
  appId: String!
}

input DeletePageInput {
  pageId: String!
}

input UpdatePageInput {
  pageId: String!
  updateData: UpdatePageData!
}

input UpdatePageData {
  name: String!
  appId: String!
}

input CreatePageElementInput {
  name: String!
  atomId: String
  parentPageElementId: String!

  """
  Leave it out to automatically set it as the last order of all the children
  """
  order: Int
}

input UpdatePageElementInput {
  updateData: UpdatePageElementData!
  pageElementId: String!
}

input UpdatePageElementData {
  name: String!
  css: String
  atomId: String
}

input MovePageElementInput {
  pageElementId: String!
  moveData: MoveData!
}

input MoveData {
  order: Int!
  parentElementId: String!
}

input DeletePageElementInput {
  pageElementId: String!
}

input CreateAtomInput {
  label: String!
  type: AtomType!
}

input DeleteAtomInput {
  atomId: String!
}

input UpdateAtomInput {
  id: String!
  data: CreateAtomInput!
}

input CreateInterfaceInput {
  name: String!
}

input UpdateInterfaceInput {
  interfaceId: String!
  updateData: UpdateInterfaceData!
}

input UpdateInterfaceData {
  name: String!
}

input CreateFieldInput {
  key: String!
  name: String!
  description: String
  interfaceId: String!
  type: TypeRef!
}

input TypeRef {
  existingTypeId: String
  newType: CreateTypeInput
}

"""Provide one of the properties"""
input CreateTypeInput {
  name: String!
  simpleType: CreateSimpleTypeInput
  arrayType: CreateArrayTypeInput
  enumType: CreateEnumTypeInput
  interfaceType: Boolean
}

input CreateSimpleTypeInput {
  primitiveType: PrimitiveType!
}

input CreateArrayTypeInput {
  itemTypeId: String!
}

input CreateEnumTypeInput {
  allowedValues: [CreateEnumTypeValueInput!]!
}

input CreateEnumTypeValueInput {
  name: String
  value: String!
}

input UpdateFieldInput {
  fieldId: String!
  updateData: UpdateFieldData!
}

input UpdateFieldData {
  key: String!
  name: String!
  description: String
  interfaceId: String!
  type: TypeRef!
}

input DeleteFieldInput {
  fieldId: String!
}

input UpdateEnumTypeInput {
  typeId: String!
  updateData: UpdateEnumTypeData!
}

input UpdateEnumTypeData {
  allowedValues: [UpdateEnumTypeValueData!]!
  name: String!
}

input UpdateEnumTypeValueData {
  name: String
  value: String!
}

input UpdateSimpleTypeInput {
  typeId: String!
  updateData: UpdateSimpleTypeData!
}

input UpdateSimpleTypeData {
  primitiveType: PrimitiveType!
  name: String!
}

input UpdateTypeInput {
  updateData: UpdateTypeData!
  typeId: String!
}

input UpdateTypeData {
  name: String!
}

input DeleteTypeInput {
  typeId: String!
}

input UpsertPropsInput {
  propId: String
  fieldId: String!
  pageElementId: String
  value: UpsertValueInput
}

input UpsertValueInput {
  stringValue: StringValueInput
  intValue: IntValueInput
  floatValue: FloatValueInput
  booleanValue: BoleanValueInput
  arrayValue: ArrayValueInput
  interfaceValue: InterfaceValueInput
  enumValueId: String
}

input StringValueInput {
  value: String!
}

input IntValueInput {
  value: Int!
}

input FloatValueInput {
  value: Float!
}

input BoleanValueInput {
  value: Boolean!
}

input ArrayValueInput {
  values: [UpsertValueInput!]!
}

input InterfaceValueInput {
  props: [UpsertPropsInput!]!
}
