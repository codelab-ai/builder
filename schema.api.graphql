# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type DeleteResponse {
  affected: Int!
}

type App {
  id: ID!
  ownerId: String!
  name: String!
}

type Atom {
  id: ID!
  type: AtomType!
  label: String!
}

enum AtomType {
  ReactAffix
  ReactAlert
  ReactAnchor
  ReactAnchorLink
  ReactAutoComplete
  ReactAvatar
  ReactBackTop
  ReactBadge
  ReactBreadcrumb
  ReactBreadcrumbItem
  ReactButton
  ReactCalendar
  ReactCard
  ReactCardGrid
  ReactCardMeta
  ReactCarousel
  ReactCascader
  ReactCheckbox
  ReactCollapse
  ReactCollapsePanel
  ReactComment
  ReactConfigProvider
  ReactDatePicker
  ReactDescriptions
  ReactDescriptionsItem
  ReactDivider
  ReactDrawer
  ReactDropdown
  ReactEmpty
  ReactForm
  ReactFormItem
  ReactFormItemHook
  ReactFormList
  ReactFragment
  ReactGridCol
  ReactGridRow
  ReactHtmlA
  ReactHtmlDiv
  ReactHtmlP
  ReactHtmlSpan
  ReactIcon
  ReactInput
  ReactInputNumber
  ReactLayout
  ReactLayoutContent
  ReactLayoutFooter
  ReactLayoutHeader
  ReactLayoutSider
  ReactList
  ReactListItem
  ReactListItemMeta
  ReactMapper
  ReactMentions
  ReactMentionsOption
  ReactMenu
  ReactMenuItem
  ReactMenuItemGroup
  ReactMenuSubMenu
  ReactModal
  ReactPageHeader
  ReactPageContainer
  ReactPagination
  ReactPopconfirm
  ReactPopover
  ReactProgress
  ReactProvider
  ReactRglContainer
  ReactRglItem
  ReactRglResponsiveContainer
  ReactRadio
  ReactRadioGroup
  ReactRate
  ReactRenderComponent
  ReactRenderContainer
  ReactResult
  ReactSelect
  ReactSelectOption
  ReactSkeleton
  ReactSlider
  ReactSpace
  ReactSpin
  ReactStatistic
  ReactSteps
  ReactStepsStep
  ReactSwitch
  ReactTable
  ReactTabs
  ReactTabsTabPane
  ReactTag
  ReactText
  ReactTimePicker
  ReactTimeline
  ReactTimelineItem
  ReactTooltip
  ReactTransfer
  ReactTree
  ReactTreeNode
  ReactTreeSelect
  ReactTypography
  ReactTypographyParagraph
  ReactTypographyText
  ReactTypographyTitle
  ReactUpload
}

type PageElement {
  id: ID!
  name: String!
  atom: Atom
}

type PageElementLink {
  """The id of the source PageElement"""
  from: String!

  """The id of the target PageElement"""
  to: String!
  order: Int!
}

type PageElementRoot {
  id: ID!
  name: String!
  atom: Atom

  """All descendant PageElements that are under this root, at any level"""
  descendants: [PageElement!]!

  """All the links connecting the descendant page elements"""
  links: [PageElementLink!]!
}

type Page {
  id: ID!
  name: String!
  app: App!
  rootElement: PageElementRoot!
}

type ValueType {
  id: ID!
  label: String!
  type: String!
}

type Prop {
  id: ID!
  key: String
  type: ValueType!
  description: String
  props: [Prop!]
}

type User {
  blocked: Boolean
  created_at: String
  email: String
  email_verified: Boolean
  family_name: String
  given_name: String
  last_ip: String
  last_login: String
  last_password_reset: String
  logins_count: Float
  multifactor: [String!]
  name: String
  nickname: String
  phone_number: String
  phone_verified: Boolean
  picture: String
  updated_at: String
  user_id: String
  username: String
}

type Query {
  getMe: User!
  getUsers(input: GetUsersInput): [User!]!
  getApp(input: GetAppInput!): App
  getApps: [App!]!
  getPages(input: GetPagesInput!): [Page!]!
  getPage(input: GetPageInput!): Page
  getPageElement(input: GetPageElementInput!): PageElement

  """
  Aggregates the requested page element and all of its descendant elements (infinitely deep) in the form of array of PageElement and array of PageElementLink
  """
  getPageElementRoot(input: GetPageElementRootInput!): PageElementRoot
  getAtoms: [Atom!]!
  getAtom(input: GetAtomInput!): Atom
  getValueTypes: [ValueType!]!
  getProps: [Prop!]!
}

input GetUsersInput {
  page: Int!
  perPage: Int!
  query: String!
  sort: String!
}

input GetAppInput {
  appId: String!
}

input GetPagesInput {
  appId: String!
}

input GetPageInput {
  pageId: String!
}

input GetPageElementInput {
  pageElementId: String!
}

input GetPageElementRootInput {
  pageElementId: String!
}

input GetAtomInput {
  atomId: String!
}

type Mutation {
  updateUser(input: UpdateUserInput!): User!
  deleteUser(input: DeleteUserInput!): Boolean!
  createApp(input: CreateAppInput!): App!
  updateApp(input: UpdateAppInput!): App!
  deleteApp(input: DeleteAppInput!): App!
  createPage(input: CreatePageInput!): Page!
  updatePage(input: UpdatePageInput!): Page!
  createPageElement(input: CreatePageElementInput!): PageElement!
  updatePageElement(input: UpdatePageElementInput!): PageElement!
  movePageElement(input: MovePageElementInput!): PageElement!

  """Deletes a page element and all the descending page elements"""
  deletePageElement(input: DeletePageElementInput!): DeleteResponse!
  createAtom(input: CreateAtomInput!): Atom!
  deleteAtom(input: DeleteAtomInput!): Atom!
  updateAtom(input: UpdateAtomInput!): Atom!
}

input UpdateUserInput {
  userId: String!
  updateData: UpdateUserData!
}

input UpdateUserData {
  family_name: String
  given_name: String
  name: String
  nickname: String
  phone_number: String
  picture: String
  username: String
}

input DeleteUserInput {
  userId: String!
}

input CreateAppInput {
  name: String!
}

input UpdateAppInput {
  appId: String!
  updateData: UpdateAppData!
}

input UpdateAppData {
  name: String!
}

input DeleteAppInput {
  appId: String!
}

input CreatePageInput {
  name: String!
  appId: String!
}

input UpdatePageInput {
  pageId: String!
  updateData: UpdatePageData!
}

input UpdatePageData {
  name: String!
  appId: String!
}

input CreatePageElementInput {
  name: String!
  atomId: String
  parentPageElementId: String!

  """
  Leave it out to automatically set it as the last order of all the children
  """
  order: Int
}

input UpdatePageElementInput {
  updateData: UpdatePageElementData!
  pageElementId: String!
}

input UpdatePageElementData {
  name: String!
  atomId: String
}

input MovePageElementInput {
  pageElementId: String!
  moveData: MoveData!
}

input MoveData {
  order: Int!
  parentElementId: String!
}

input DeletePageElementInput {
  pageElementId: String!
}

input CreateAtomInput {
  label: String!
  type: AtomType!
}

input DeleteAtomInput {
  atomId: String!
}

input UpdateAtomInput {
  atomId: String!
  updateData: UpdateAtomData!
}

input UpdateAtomData {
  type: AtomType!
}
