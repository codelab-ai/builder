# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

interface Type {
  id: ID!
  name: String!
}

type DeleteResponse {
  affected: Int!
}

type ArrayType implements Type {
  id: ID!
  name: String!
  typeId: String!
}

type EnumTypeValue {
  id: ID!
  name: String
  value: String!
}

type EnumType implements Type {
  id: ID!
  name: String!
  allowedValues: [EnumTypeValue!]!
}

type SimpleType implements Type {
  id: ID!
  name: String!
  primitiveType: PrimitiveType!
}

enum PrimitiveType {
  String
  Integer
  Float
  Boolean
}

type Interface implements Type {
  id: ID!
  name: String!
  fieldCollection: FieldCollection!
}

type FieldCollection {
  fields: [Field!]!

  """Flattened array of all types that are used inside this interface"""
  types: [Type!]!
}

type Field {
  id: ID!
  key: String!
  name: String!
  description: String
  typeId: String!
  decorators: [Decorator!]!
  interface: Interface!
}

union Decorator = ArrayLengthValidator | MinMaxValidator | RequiredValidator

type ArrayLengthValidator {
  id: ID!
  minLength: Int
  maxLength: Int
}

type MinMaxValidator {
  id: ID!
  min: Int
  max: Int
}

type RequiredValidator {
  id: ID!
  isRequired: Boolean!
}

type Query {
  getInterface(input: GetInterfaceInput!): Interface
  getInterfaces: [Interface!]!
  getField(input: GetFieldInput!): Field
  getType(input: GetTypeInput!): Type
}

input GetInterfaceInput {
  interfaceId: String!
}

input GetFieldInput {
  byInterface: FieldByInterfaceFilter
  byId: FieldByIdFilter
}

input FieldByInterfaceFilter {
  interfaceId: String!
  fieldKey: String!
}

input FieldByIdFilter {
  fieldId: String!
}

input GetTypeInput {
  typeId: String!
}

type Mutation {
  createInterface(input: CreateInterfaceInput!): Interface!
  updateInterface(input: UpdateInterfaceInput!): Interface!
  deleteInterface(input: DeleteInterfaceInput!): DeleteResponse!
  createField(input: CreateFieldInput!): Field!
  updateField(input: UpdateFieldInput!): Field!
  deleteField(input: DeleteFieldInput!): DeleteResponse!
}

input CreateInterfaceInput {
  name: String!
}

input UpdateInterfaceInput {
  interfaceId: String!
  updateData: UpdateInterfaceData!
}

input UpdateInterfaceData {
  name: String!
}

input DeleteInterfaceInput {
  interfaceId: String!
}

input CreateFieldInput {
  key: String!
  name: String!
  description: String
  interfaceId: String!
  type: CreateTypeInput!
}

"""Provide one of the properties"""
input CreateTypeInput {
  simpleType: CreateSimpleTypeInput
  interfaceType: CreateInterfaceTypeInput
  arrayType: CreateArrayTypeInput
  enumType: CreateEnumTypeInput
}

input CreateSimpleTypeInput {
  primitiveType: PrimitiveType!
}

input CreateInterfaceTypeInput {
  interfaceId: String!
}

input CreateArrayTypeInput {
  type: CreateTypeInput!
}

input CreateEnumTypeInput {
  allowedValues: [String!]!
}

input UpdateFieldInput {
  fieldId: String!
  updateData: UpdateFieldData!
}

input UpdateFieldData {
  key: String!
  name: String!
  description: String
  interfaceId: String!
  type: CreateTypeInput!
}

input DeleteFieldInput {
  fieldId: String!
}
