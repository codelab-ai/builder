directive @auth(
  password: AuthRule
  query: AuthRule
  add: AuthRule
  update: AuthRule
  delete: AuthRule
) on OBJECT | INTERFACE

directive @cacheControl(maxAge: Int!) on QUERY

directive @cascade(fields: [String]) on FIELD

directive @custom(http: CustomHTTP, dql: String) on FIELD_DEFINITION

directive @dgraph(
  type: String
  pred: String
) on OBJECT | INTERFACE | FIELD_DEFINITION

directive @generate(
  query: GenerateQueryParams
  mutation: GenerateMutationParams
  subscription: Boolean
) on OBJECT | INTERFACE

directive @hasInverse(field: String!) on FIELD_DEFINITION

directive @id on FIELD_DEFINITION

directive @lambda on FIELD_DEFINITION

directive @lambdaOnMutate(
  add: Boolean
  update: Boolean
  delete: Boolean
) on OBJECT | INTERFACE

directive @remote on OBJECT | INTERFACE | UNION | INPUT_OBJECT | ENUM

directive @remoteResponse(name: String) on FIELD_DEFINITION

directive @search(by: [DgraphIndex!]) on FIELD_DEFINITION

directive @secret(field: String!, pred: String) on OBJECT | INTERFACE

directive @withSubscription on OBJECT | INTERFACE | FIELD_DEFINITION

input AddAppInput {
  ownerId: String!
  pages: [PageRef]
  name: String!
}

type AddAppPayload {
  app(filter: AppFilter, order: AppOrder, first: Int, offset: Int): [App]
  numUids: Int
}

input AddArrayLengthValidatorInput {
  min: Int
  max: Int
}

type AddArrayLengthValidatorPayload {
  arrayLengthValidator(
    filter: ArrayLengthValidatorFilter
    order: ArrayLengthValidatorOrder
    first: Int
    offset: Int
  ): [ArrayLengthValidator]
  numUids: Int
}

input AddArrayTypeInput {
  name: String!
  type: TypeRef!
}

type AddArrayTypePayload {
  arrayType(
    filter: ArrayTypeFilter
    order: ArrayTypeOrder
    first: Int
    offset: Int
  ): [ArrayType]
  numUids: Int
}

input AddArrayValueInput {
  values: [PropValueRef!]!
}

type AddArrayValuePayload {
  arrayValue(filter: ArrayValueFilter, first: Int, offset: Int): [ArrayValue]
  numUids: Int
}

input AddAtomInput {
  type: AtomType!
  label: String!
  library: LibraryRef
  propTypes: InterfaceRef!
}

type AddAtomPayload {
  atom(filter: AtomFilter, order: AtomOrder, first: Int, offset: Int): [Atom]
  numUids: Int
}

input AddBooleanValueInput {
  booleanValue: Boolean!
}

type AddBooleanValuePayload {
  booleanValue(
    filter: BooleanValueFilter
    first: Int
    offset: Int
  ): [BooleanValue]
  numUids: Int
}

input AddComponentInput {
  library: LibraryRef!
  atom: AtomRef!
  label: String!
  children: [ComponentRef]
  tags: [TagRef]
}

type AddComponentPayload {
  component(
    filter: ComponentFilter
    order: ComponentOrder
    first: Int
    offset: Int
  ): [Component]
  numUids: Int
}

input AddEnumTypeInput {
  name: String!
  allowedValues: [EnumTypeValueRef!]!
}

type AddEnumTypePayload {
  enumType(
    filter: EnumTypeFilter
    order: EnumTypeOrder
    first: Int
    offset: Int
  ): [EnumType]
  numUids: Int
}

input AddEnumTypeValueInput {
  name: String
  value: String!
}

type AddEnumTypeValuePayload {
  enumTypeValue(
    filter: EnumTypeValueFilter
    order: EnumTypeValueOrder
    first: Int
    offset: Int
  ): [EnumTypeValue]
  numUids: Int
}

input AddFieldInput {
  type: TypeRef!
  key: String!
  name: String!
  description: String
  decorators: [DecoratorRef]
  interface: InterfaceRef!
}

type AddFieldPayload {
  field(
    filter: FieldFilter
    order: FieldOrder
    first: Int
    offset: Int
  ): [Field]
  numUids: Int
}

input AddFloatValueInput {
  floatValue: Float!
}

type AddFloatValuePayload {
  floatValue(
    filter: FloatValueFilter
    order: FloatValueOrder
    first: Int
    offset: Int
  ): [FloatValue]
  numUids: Int
}

input AddIntValueInput {
  intValue: Int!
}

type AddIntValuePayload {
  intValue(
    filter: IntValueFilter
    order: IntValueOrder
    first: Int
    offset: Int
  ): [IntValue]
  numUids: Int
}

input AddInterfaceInput {
  name: String!
  atom: AtomRef
  fields: [FieldRef]
}

type AddInterfacePayload {
  interface(
    filter: InterfaceFilter
    order: InterfaceOrder
    first: Int
    offset: Int
  ): [Interface]
  numUids: Int
}

input AddInterfaceValueInput {
  props: [PropRef!]!
}

type AddInterfaceValuePayload {
  interfaceValue(
    filter: InterfaceValueFilter
    first: Int
    offset: Int
  ): [InterfaceValue]
  numUids: Int
}

input AddLibraryInput {
  ownerId: String!
  name: String!
  atoms: [AtomRef]
  components: [ComponentRef]
}

type AddLibraryPayload {
  library(
    filter: LibraryFilter
    order: LibraryOrder
    first: Int
    offset: Int
  ): [Library]
  numUids: Int
}

input AddMinMaxValidatorInput {
  min: Int
  max: Int
}

type AddMinMaxValidatorPayload {
  minMaxValidator(
    filter: MinMaxValidatorFilter
    order: MinMaxValidatorOrder
    first: Int
    offset: Int
  ): [MinMaxValidator]
  numUids: Int
}

input AddPageElementInput {
  name: String!
  page: PageRef!
  parent: PageElementRef
  children: [PageElementRef]
  atom: AtomRef
  component: ComponentRef
  props: [PropRef!]!
  css: String
}

type AddPageElementPayload {
  pageElement(
    filter: PageElementFilter
    order: PageElementOrder
    first: Int
    offset: Int
  ): [PageElement]
  numUids: Int
}

input AddPageInput {
  name: String!
  app: AppRef!
  rootElement: PageElementRef!
}

type AddPagePayload {
  page(filter: PageFilter, order: PageOrder, first: Int, offset: Int): [Page]
  numUids: Int
}

input AddPropInput {
  field: FieldRef!
  value: PropValueRef
  pageElement: PageElementRef
}

type AddPropPayload {
  prop(filter: PropFilter, first: Int, offset: Int): [Prop]
  numUids: Int
}

input AddRequiredValidatorInput {
  isRequired: Boolean!
}

type AddRequiredValidatorPayload {
  requiredValidator(
    filter: RequiredValidatorFilter
    first: Int
    offset: Int
  ): [RequiredValidator]
  numUids: Int
}

input AddSimpleTypeInput {
  name: String!
  primitiveType: PrimitiveType!
}

type AddSimpleTypePayload {
  simpleType(
    filter: SimpleTypeFilter
    order: SimpleTypeOrder
    first: Int
    offset: Int
  ): [SimpleType]
  numUids: Int
}

input AddStringValueInput {
  stringValue: String!
}

type AddStringValuePayload {
  stringValue(
    filter: StringValueFilter
    order: StringValueOrder
    first: Int
    offset: Int
  ): [StringValue]
  numUids: Int
}

input AddTagInput {
  label: String!
}

type AddTagPayload {
  tag(filter: TagFilter, order: TagOrder, first: Int, offset: Int): [Tag]
  numUids: Int
}

type App {
  id: ID!
  ownerId: String!
  pages(filter: PageFilter, order: PageOrder, first: Int, offset: Int): [Page]
  name: String!
  pagesAggregate(filter: PageFilter): PageAggregateResult
}

type AppAggregateResult {
  count: Int
  ownerIdMin: String
  ownerIdMax: String
  nameMin: String
  nameMax: String
}

input AppFilter {
  id: [ID!]
  ownerId: StringHashFilter
  has: [AppHasFilter]
  and: [AppFilter]
  or: [AppFilter]
  not: AppFilter
}

enum AppHasFilter {
  ownerId
  pages
  name
}

input AppOrder {
  asc: AppOrderable
  desc: AppOrderable
  then: AppOrder
}

enum AppOrderable {
  ownerId
  name
}

input AppPatch {
  ownerId: String
  pages: [PageRef]
  name: String
}

input AppRef {
  id: ID
  ownerId: String
  pages: [PageRef]
  name: String
}

type ArrayLengthValidator {
  id: ID!
  min: Int
  max: Int
}

type ArrayLengthValidatorAggregateResult {
  count: Int
  minMin: Int
  minMax: Int
  minSum: Int
  minAvg: Float
  maxMin: Int
  maxMax: Int
  maxSum: Int
  maxAvg: Float
}

input ArrayLengthValidatorFilter {
  id: [ID!]
  has: [ArrayLengthValidatorHasFilter]
  and: [ArrayLengthValidatorFilter]
  or: [ArrayLengthValidatorFilter]
  not: ArrayLengthValidatorFilter
}

enum ArrayLengthValidatorHasFilter {
  min
  max
}

input ArrayLengthValidatorOrder {
  asc: ArrayLengthValidatorOrderable
  desc: ArrayLengthValidatorOrderable
  then: ArrayLengthValidatorOrder
}

enum ArrayLengthValidatorOrderable {
  min
  max
}

input ArrayLengthValidatorPatch {
  min: Int
  max: Int
}

input ArrayLengthValidatorRef {
  id: ID
  min: Int
  max: Int
}

type ArrayType implements Type {
  id: ID!
  name: String!
  type(filter: TypeFilter): Type!
}

type ArrayTypeAggregateResult {
  count: Int
  nameMin: String
  nameMax: String
}

input ArrayTypeFilter {
  id: [ID!]
  has: [ArrayTypeHasFilter]
  and: [ArrayTypeFilter]
  or: [ArrayTypeFilter]
  not: ArrayTypeFilter
}

enum ArrayTypeHasFilter {
  name
  type
}

input ArrayTypeOrder {
  asc: ArrayTypeOrderable
  desc: ArrayTypeOrderable
  then: ArrayTypeOrder
}

enum ArrayTypeOrderable {
  name
}

input ArrayTypePatch {
  name: String
  type: TypeRef
}

input ArrayTypeRef {
  id: ID
  name: String
  type: TypeRef
}

type ArrayValue {
  id: ID!
  values(filter: PropValueFilter, first: Int, offset: Int): [PropValue!]!
}

type ArrayValueAggregateResult {
  count: Int
}

input ArrayValueFilter {
  id: [ID!]
  has: [ArrayValueHasFilter]
  and: [ArrayValueFilter]
  or: [ArrayValueFilter]
  not: ArrayValueFilter
}

enum ArrayValueHasFilter {
  values
}

input ArrayValuePatch {
  values: [PropValueRef!]
}

input ArrayValueRef {
  id: ID
  values: [PropValueRef!]
}

type Atom {
  id: ID!
  type: AtomType!
  label: String!
  library(filter: LibraryFilter): Library
  propTypes(filter: InterfaceFilter): Interface!
}

type AtomAggregateResult {
  count: Int
  labelMin: String
  labelMax: String
}

input AtomFilter {
  id: [ID!]
  has: [AtomHasFilter]
  and: [AtomFilter]
  or: [AtomFilter]
  not: AtomFilter
}

enum AtomHasFilter {
  type
  label
  library
  propTypes
}

input AtomOrder {
  asc: AtomOrderable
  desc: AtomOrderable
  then: AtomOrder
}

enum AtomOrderable {
  label
}

input AtomPatch {
  type: AtomType
  label: String
  library: LibraryRef
  propTypes: InterfaceRef
}

input AtomRef {
  id: ID
  type: AtomType
  label: String
  library: LibraryRef
  propTypes: InterfaceRef
}

enum AtomType {
  AntDesignAffix
  AntDesignAlert
  AntDesignAnchor
  AntDesignAnchorLink
  AntDesignAutoComplete
  AntDesignAvatar
  AntDesignBackTop
  AntDesignBadge
  AntDesignBreadcrumb
  AntDesignBreadcrumbItem
  AntDesignButton
  AntDesignCalendar
  AntDesignCard
  AntDesignCardGrid
  AntDesignCardMeta
  AntDesignCarousel
  AntDesignCascader
  AntDesignCheckbox
  AntDesignCollapse
  AntDesignCollapsePanel
  AntDesignComment
  AntDesignConfigProvider
  AntDesignDatePicker
  AntDesignDescriptions
  AntDesignDescriptionsItem
  AntDesignDivider
  AntDesignDrawer
  AntDesignDropdown
  AntDesignEmpty
  AntDesignForm
  AntDesignFormItem
  AntDesignFormItemHook
  AntDesignFormList
  AntDesignGridCol
  AntDesignGridRow
  AntDesignIcon
  AntDesignInput
  AntDesignInputNumber
  AntDesignLayout
  AntDesignLayoutContent
  AntDesignLayoutFooter
  AntDesignLayoutHeader
  AntDesignLayoutSider
  AntDesignList
  AntDesignListItem
  AntDesignListItemMeta
  AntDesignMapper
  AntDesignMentions
  AntDesignMentionsOption
  AntDesignMenu
  AntDesignMenuItem
  AntDesignMenuItemGroup
  AntDesignMenuSubMenu
  AntDesignModal
  AntDesignPageHeader
  AntDesignPageContainer
  AntDesignPagination
  AntDesignPopconfirm
  AntDesignPopover
  AntDesignProgress
  AntDesignProvider
  AntDesignRglContainer
  AntDesignRglItem
  AntDesignRglResponsiveContainer
  AntDesignRadio
  AntDesignRadioGroup
  AntDesignRate
  AntDesignRenderComponent
  AntDesignRenderContainer
  AntDesignResult
  AntDesignSelect
  AntDesignSelectOption
  AntDesignSkeleton
  AntDesignSlider
  AntDesignSpace
  AntDesignSpin
  AntDesignStatistic
  AntDesignSteps
  AntDesignStepsStep
  AntDesignSwitch
  AntDesignTable
  AntDesignTabs
  AntDesignTabsTabPane
  AntDesignTag
  AntDesignTimePicker
  AntDesignTimeline
  AntDesignTimelineItem
  AntDesignTooltip
  AntDesignTransfer
  AntDesignTree
  AntDesignTreeNode
  AntDesignTreeSelect
  AntDesignTypography
  AntDesignTypographyParagraph
  AntDesignTypographyText
  AntDesignTypographyTitle
  AntDesignUpload
  ReactFragment
  HtmlA
  HtmlP
  HtmlVideo
  HtmlUList
  HtmlTrack
  HtmlTitle
  HtmlTime
  HtmlTextarea
  HtmlTemplate
  HtmlTableRow
  HtmlTable
  HtmlTableCol
  HtmlTableCell
  HtmlTableCaption
  HtmlStyle
  HtmlSpan
  HtmlSource
  HtmlSelect
  HtmlQuote
  HtmlProgress
  HtmlPre
  HtmlPicture
  HtmlParam
  HtmlOutput
  HtmlOption
  HtmlOptgroup
  HtmlObject
  HtmlOList
  HtmlMeter
  HtmlMeta
  HtmlMap
  HtmlLink
  HtmlLegend
  HtmlLabel
  HtmlLi
  HtmlInput
  HtmlImage
  HtmlIframe
  HtmlH1
  HtmlH2
  HtmlH3
  HtmlH4
  HtmlH5
  HtmlH6
  HtmlHead
  HtmlHr
  HtmlFrameset
  HtmlFrame
  HtmlForm
  HtmlFont
  HtmlFieldset
  HtmlEmbed
  HtmlDiv
  HtmlDialog
  HtmlDetails
  HtmlDatalist
  HtmlData
  HtmlDList
  HtmlCanvas
  HtmlButton
  HtmlBase
  HtmlBr
  HtmlAudio
  HtmlArea
  HtmlFooter
  HtmlAside
  HtmlHeader
  HtmlMain
  HtmlNav
  HtmlSection
  HtmlCode
  HtmlEm
  HtmlI
  HtmlS
  HtmlSmall
  HtmlStrong
  HtmlSub
  HtmlSup
}

input AuthRule {
  and: [AuthRule]
  or: [AuthRule]
  not: AuthRule
  rule: String
}

type BooleanValue {
  id: ID!
  booleanValue: Boolean!
}

type BooleanValueAggregateResult {
  count: Int
}

input BooleanValueFilter {
  id: [ID!]
  has: [BooleanValueHasFilter]
  and: [BooleanValueFilter]
  or: [BooleanValueFilter]
  not: BooleanValueFilter
}

enum BooleanValueHasFilter {
  booleanValue
}

input BooleanValuePatch {
  booleanValue: Boolean
}

input BooleanValueRef {
  id: ID
  booleanValue: Boolean
}

type Component {
  id: ID!
  library(filter: LibraryFilter): Library!
  atom(filter: AtomFilter): Atom!
  label: String!
  children(
    filter: ComponentFilter
    order: ComponentOrder
    first: Int
    offset: Int
  ): [Component]
  tags(filter: TagFilter, order: TagOrder, first: Int, offset: Int): [Tag]
  childrenAggregate(filter: ComponentFilter): ComponentAggregateResult
  tagsAggregate(filter: TagFilter): TagAggregateResult
}

type ComponentAggregateResult {
  count: Int
  labelMin: String
  labelMax: String
}

input ComponentFilter {
  id: [ID!]
  has: [ComponentHasFilter]
  and: [ComponentFilter]
  or: [ComponentFilter]
  not: ComponentFilter
}

enum ComponentHasFilter {
  library
  atom
  label
  children
  tags
}

input ComponentOrder {
  asc: ComponentOrderable
  desc: ComponentOrderable
  then: ComponentOrder
}

enum ComponentOrderable {
  label
}

input ComponentPatch {
  library: LibraryRef
  atom: AtomRef
  label: String
  children: [ComponentRef]
  tags: [TagRef]
}

input ComponentRef {
  id: ID
  library: LibraryRef
  atom: AtomRef
  label: String
  children: [ComponentRef]
  tags: [TagRef]
}

input ContainsFilter {
  point: PointRef
  polygon: PolygonRef
}

input CustomHTTP {
  url: String!
  method: HTTPMethod!
  body: String
  graphql: String
  mode: Mode
  forwardHeaders: [String!]
  secretHeaders: [String!]
  introspectionHeaders: [String!]
  skipIntrospection: Boolean
}

"""
The DateTime scalar type represents date and time as a string in RFC3339 format.
For example: "1985-04-12T23:20:50.52Z" represents 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC.
"""
scalar DateTime

input DateTimeFilter {
  eq: DateTime
  in: [DateTime]
  le: DateTime
  lt: DateTime
  ge: DateTime
  gt: DateTime
  between: DateTimeRange
}

input DateTimeRange {
  min: DateTime!
  max: DateTime!
}

union Decorator = MinMaxValidator | RequiredValidator | ArrayLengthValidator

input DecoratorFilter {
  memberTypes: [DecoratorType!]
  minMaxValidatorFilter: MinMaxValidatorFilter
  requiredValidatorFilter: RequiredValidatorFilter
  arrayLengthValidatorFilter: ArrayLengthValidatorFilter
}

input DecoratorRef {
  minMaxValidatorRef: MinMaxValidatorRef
  requiredValidatorRef: RequiredValidatorRef
  arrayLengthValidatorRef: ArrayLengthValidatorRef
}

enum DecoratorType {
  MinMaxValidator
  RequiredValidator
  ArrayLengthValidator
}

type DeleteAppPayload {
  app(filter: AppFilter, order: AppOrder, first: Int, offset: Int): [App]
  msg: String
  numUids: Int
}

type DeleteArrayLengthValidatorPayload {
  arrayLengthValidator(
    filter: ArrayLengthValidatorFilter
    order: ArrayLengthValidatorOrder
    first: Int
    offset: Int
  ): [ArrayLengthValidator]
  msg: String
  numUids: Int
}

type DeleteArrayTypePayload {
  arrayType(
    filter: ArrayTypeFilter
    order: ArrayTypeOrder
    first: Int
    offset: Int
  ): [ArrayType]
  msg: String
  numUids: Int
}

type DeleteArrayValuePayload {
  arrayValue(filter: ArrayValueFilter, first: Int, offset: Int): [ArrayValue]
  msg: String
  numUids: Int
}

type DeleteAtomPayload {
  atom(filter: AtomFilter, order: AtomOrder, first: Int, offset: Int): [Atom]
  msg: String
  numUids: Int
}

type DeleteBooleanValuePayload {
  booleanValue(
    filter: BooleanValueFilter
    first: Int
    offset: Int
  ): [BooleanValue]
  msg: String
  numUids: Int
}

type DeleteComponentPayload {
  component(
    filter: ComponentFilter
    order: ComponentOrder
    first: Int
    offset: Int
  ): [Component]
  msg: String
  numUids: Int
}

type DeleteEnumTypePayload {
  enumType(
    filter: EnumTypeFilter
    order: EnumTypeOrder
    first: Int
    offset: Int
  ): [EnumType]
  msg: String
  numUids: Int
}

type DeleteEnumTypeValuePayload {
  enumTypeValue(
    filter: EnumTypeValueFilter
    order: EnumTypeValueOrder
    first: Int
    offset: Int
  ): [EnumTypeValue]
  msg: String
  numUids: Int
}

type DeleteFieldPayload {
  field(
    filter: FieldFilter
    order: FieldOrder
    first: Int
    offset: Int
  ): [Field]
  msg: String
  numUids: Int
}

type DeleteFloatValuePayload {
  floatValue(
    filter: FloatValueFilter
    order: FloatValueOrder
    first: Int
    offset: Int
  ): [FloatValue]
  msg: String
  numUids: Int
}

type DeleteIntValuePayload {
  intValue(
    filter: IntValueFilter
    order: IntValueOrder
    first: Int
    offset: Int
  ): [IntValue]
  msg: String
  numUids: Int
}

type DeleteInterfacePayload {
  interface(
    filter: InterfaceFilter
    order: InterfaceOrder
    first: Int
    offset: Int
  ): [Interface]
  msg: String
  numUids: Int
}

type DeleteInterfaceValuePayload {
  interfaceValue(
    filter: InterfaceValueFilter
    first: Int
    offset: Int
  ): [InterfaceValue]
  msg: String
  numUids: Int
}

type DeleteLibraryPayload {
  library(
    filter: LibraryFilter
    order: LibraryOrder
    first: Int
    offset: Int
  ): [Library]
  msg: String
  numUids: Int
}

type DeleteMinMaxValidatorPayload {
  minMaxValidator(
    filter: MinMaxValidatorFilter
    order: MinMaxValidatorOrder
    first: Int
    offset: Int
  ): [MinMaxValidator]
  msg: String
  numUids: Int
}

type DeletePageElementPayload {
  pageElement(
    filter: PageElementFilter
    order: PageElementOrder
    first: Int
    offset: Int
  ): [PageElement]
  msg: String
  numUids: Int
}

type DeletePagePayload {
  page(filter: PageFilter, order: PageOrder, first: Int, offset: Int): [Page]
  msg: String
  numUids: Int
}

type DeletePropPayload {
  prop(filter: PropFilter, first: Int, offset: Int): [Prop]
  msg: String
  numUids: Int
}

type DeleteRequiredValidatorPayload {
  requiredValidator(
    filter: RequiredValidatorFilter
    first: Int
    offset: Int
  ): [RequiredValidator]
  msg: String
  numUids: Int
}

type DeleteSimpleTypePayload {
  simpleType(
    filter: SimpleTypeFilter
    order: SimpleTypeOrder
    first: Int
    offset: Int
  ): [SimpleType]
  msg: String
  numUids: Int
}

type DeleteStringValuePayload {
  stringValue(
    filter: StringValueFilter
    order: StringValueOrder
    first: Int
    offset: Int
  ): [StringValue]
  msg: String
  numUids: Int
}

type DeleteTagPayload {
  tag(filter: TagFilter, order: TagOrder, first: Int, offset: Int): [Tag]
  msg: String
  numUids: Int
}

type DeleteTypePayload {
  type(filter: TypeFilter, order: TypeOrder, first: Int, offset: Int): [Type]
  msg: String
  numUids: Int
}

enum DgraphIndex {
  int
  int64
  float
  bool
  hash
  exact
  term
  fulltext
  trigram
  regexp
  year
  month
  day
  hour
  geo
}

type EnumType implements Type {
  id: ID!
  name: String!
  allowedValues(
    filter: EnumTypeValueFilter
    order: EnumTypeValueOrder
    first: Int
    offset: Int
  ): [EnumTypeValue!]!
  allowedValuesAggregate(
    filter: EnumTypeValueFilter
  ): EnumTypeValueAggregateResult
}

type EnumTypeAggregateResult {
  count: Int
  nameMin: String
  nameMax: String
}

input EnumTypeFilter {
  id: [ID!]
  has: [EnumTypeHasFilter]
  and: [EnumTypeFilter]
  or: [EnumTypeFilter]
  not: EnumTypeFilter
}

enum EnumTypeHasFilter {
  name
  allowedValues
}

input EnumTypeOrder {
  asc: EnumTypeOrderable
  desc: EnumTypeOrderable
  then: EnumTypeOrder
}

enum EnumTypeOrderable {
  name
}

input EnumTypePatch {
  name: String
  allowedValues: [EnumTypeValueRef!]
}

input EnumTypeRef {
  id: ID
  name: String
  allowedValues: [EnumTypeValueRef!]
}

type EnumTypeValue {
  id: ID!
  name: String
  value: String!
}

type EnumTypeValueAggregateResult {
  count: Int
  nameMin: String
  nameMax: String
  valueMin: String
  valueMax: String
}

input EnumTypeValueFilter {
  id: [ID!]
  has: [EnumTypeValueHasFilter]
  and: [EnumTypeValueFilter]
  or: [EnumTypeValueFilter]
  not: EnumTypeValueFilter
}

enum EnumTypeValueHasFilter {
  name
  value
}

input EnumTypeValueOrder {
  asc: EnumTypeValueOrderable
  desc: EnumTypeValueOrderable
  then: EnumTypeValueOrder
}

enum EnumTypeValueOrderable {
  name
  value
}

input EnumTypeValuePatch {
  name: String
  value: String
}

input EnumTypeValueRef {
  id: ID
  name: String
  value: String
}

type Field {
  id: ID!
  type(filter: TypeFilter): Type!
  key: String!
  name: String!
  description: String
  decorators(filter: DecoratorFilter, first: Int, offset: Int): [Decorator]
  interface(filter: InterfaceFilter): Interface!
}

type FieldAggregateResult {
  count: Int
  keyMin: String
  keyMax: String
  nameMin: String
  nameMax: String
  descriptionMin: String
  descriptionMax: String
}

input FieldFilter {
  id: [ID!]
  key: StringFullTextFilter_StringHashFilter
  has: [FieldHasFilter]
  and: [FieldFilter]
  or: [FieldFilter]
  not: FieldFilter
}

enum FieldHasFilter {
  type
  key
  name
  description
  decorators
  interface
}

input FieldOrder {
  asc: FieldOrderable
  desc: FieldOrderable
  then: FieldOrder
}

enum FieldOrderable {
  key
  name
  description
}

input FieldPatch {
  type: TypeRef
  key: String
  name: String
  description: String
  decorators: [DecoratorRef]
  interface: InterfaceRef
}

input FieldRef {
  id: ID
  type: TypeRef
  key: String
  name: String
  description: String
  decorators: [DecoratorRef]
  interface: InterfaceRef
}

input FloatFilter {
  eq: Float
  in: [Float]
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: FloatRange
}

input FloatRange {
  min: Float!
  max: Float!
}

type FloatValue {
  id: ID!
  floatValue: Float!
}

type FloatValueAggregateResult {
  count: Int
  floatValueMin: Float
  floatValueMax: Float
  floatValueSum: Float
  floatValueAvg: Float
}

input FloatValueFilter {
  id: [ID!]
  has: [FloatValueHasFilter]
  and: [FloatValueFilter]
  or: [FloatValueFilter]
  not: FloatValueFilter
}

enum FloatValueHasFilter {
  floatValue
}

input FloatValueOrder {
  asc: FloatValueOrderable
  desc: FloatValueOrderable
  then: FloatValueOrder
}

enum FloatValueOrderable {
  floatValue
}

input FloatValuePatch {
  floatValue: Float
}

input FloatValueRef {
  id: ID
  floatValue: Float
}

input GenerateMutationParams {
  add: Boolean
  update: Boolean
  delete: Boolean
}

input GenerateQueryParams {
  get: Boolean
  query: Boolean
  password: Boolean
  aggregate: Boolean
}

enum HTTPMethod {
  GET
  POST
  PUT
  PATCH
  DELETE
}

"""
The Int64 scalar type represents a signed 64‐bit numeric non‐fractional value.
Int64 can represent values in range [-(2^63),(2^63 - 1)].
"""
scalar Int64

input Int64Filter {
  eq: Int64
  in: [Int64]
  le: Int64
  lt: Int64
  ge: Int64
  gt: Int64
  between: Int64Range
}

input Int64Range {
  min: Int64!
  max: Int64!
}

input IntFilter {
  eq: Int
  in: [Int]
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: IntRange
}

input IntRange {
  min: Int!
  max: Int!
}

type IntValue {
  id: ID!
  intValue: Int!
}

type IntValueAggregateResult {
  count: Int
  intValueMin: Int
  intValueMax: Int
  intValueSum: Int
  intValueAvg: Float
}

input IntValueFilter {
  id: [ID!]
  has: [IntValueHasFilter]
  and: [IntValueFilter]
  or: [IntValueFilter]
  not: IntValueFilter
}

enum IntValueHasFilter {
  intValue
}

input IntValueOrder {
  asc: IntValueOrderable
  desc: IntValueOrderable
  then: IntValueOrder
}

enum IntValueOrderable {
  intValue
}

input IntValuePatch {
  intValue: Int
}

input IntValueRef {
  id: ID
  intValue: Int
}

type Interface implements Type {
  id: ID!
  name: String!
  atom(filter: AtomFilter): Atom
  fields(
    filter: FieldFilter
    order: FieldOrder
    first: Int
    offset: Int
  ): [Field]
  fieldsAggregate(filter: FieldFilter): FieldAggregateResult
}

type InterfaceAggregateResult {
  count: Int
  nameMin: String
  nameMax: String
}

input InterfaceFilter {
  id: [ID!]
  has: [InterfaceHasFilter]
  and: [InterfaceFilter]
  or: [InterfaceFilter]
  not: InterfaceFilter
}

enum InterfaceHasFilter {
  name
  atom
  fields
}

input InterfaceOrder {
  asc: InterfaceOrderable
  desc: InterfaceOrderable
  then: InterfaceOrder
}

enum InterfaceOrderable {
  name
}

input InterfacePatch {
  name: String
  atom: AtomRef
  fields: [FieldRef]
}

input InterfaceRef {
  id: ID
  name: String
  atom: AtomRef
  fields: [FieldRef]
}

type InterfaceValue {
  id: ID!
  props(filter: PropFilter, first: Int, offset: Int): [Prop!]!
  propsAggregate(filter: PropFilter): PropAggregateResult
}

type InterfaceValueAggregateResult {
  count: Int
}

input InterfaceValueFilter {
  id: [ID!]
  has: [InterfaceValueHasFilter]
  and: [InterfaceValueFilter]
  or: [InterfaceValueFilter]
  not: InterfaceValueFilter
}

enum InterfaceValueHasFilter {
  props
}

input InterfaceValuePatch {
  props: [PropRef!]
}

input InterfaceValueRef {
  id: ID
  props: [PropRef!]
}

input IntersectsFilter {
  polygon: PolygonRef
  multiPolygon: MultiPolygonRef
}

type Library {
  id: ID!
  ownerId: String!
  name: String!
  atoms(filter: AtomFilter, order: AtomOrder, first: Int, offset: Int): [Atom]
  components(
    filter: ComponentFilter
    order: ComponentOrder
    first: Int
    offset: Int
  ): [Component]
  atomsAggregate(filter: AtomFilter): AtomAggregateResult
  componentsAggregate(filter: ComponentFilter): ComponentAggregateResult
}

type LibraryAggregateResult {
  count: Int
  ownerIdMin: String
  ownerIdMax: String
  nameMin: String
  nameMax: String
}

input LibraryFilter {
  id: [ID!]
  has: [LibraryHasFilter]
  and: [LibraryFilter]
  or: [LibraryFilter]
  not: LibraryFilter
}

enum LibraryHasFilter {
  ownerId
  name
  atoms
  components
}

input LibraryOrder {
  asc: LibraryOrderable
  desc: LibraryOrderable
  then: LibraryOrder
}

enum LibraryOrderable {
  ownerId
  name
}

input LibraryPatch {
  ownerId: String
  name: String
  atoms: [AtomRef]
  components: [ComponentRef]
}

input LibraryRef {
  id: ID
  ownerId: String
  name: String
  atoms: [AtomRef]
  components: [ComponentRef]
}

type MinMaxValidator {
  id: ID!
  min: Int
  max: Int
}

type MinMaxValidatorAggregateResult {
  count: Int
  minMin: Int
  minMax: Int
  minSum: Int
  minAvg: Float
  maxMin: Int
  maxMax: Int
  maxSum: Int
  maxAvg: Float
}

input MinMaxValidatorFilter {
  id: [ID!]
  has: [MinMaxValidatorHasFilter]
  and: [MinMaxValidatorFilter]
  or: [MinMaxValidatorFilter]
  not: MinMaxValidatorFilter
}

enum MinMaxValidatorHasFilter {
  min
  max
}

input MinMaxValidatorOrder {
  asc: MinMaxValidatorOrderable
  desc: MinMaxValidatorOrderable
  then: MinMaxValidatorOrder
}

enum MinMaxValidatorOrderable {
  min
  max
}

input MinMaxValidatorPatch {
  min: Int
  max: Int
}

input MinMaxValidatorRef {
  id: ID
  min: Int
  max: Int
}

enum Mode {
  BATCH
  SINGLE
}

type MultiPolygon {
  polygons: [Polygon!]!
}

input MultiPolygonRef {
  polygons: [PolygonRef!]!
}

type Mutation {
  addApp(input: [AddAppInput!]!): AddAppPayload
  updateApp(input: UpdateAppInput!): UpdateAppPayload
  deleteApp(filter: AppFilter!): DeleteAppPayload
  addPage(input: [AddPageInput!]!): AddPagePayload
  updatePage(input: UpdatePageInput!): UpdatePagePayload
  deletePage(filter: PageFilter!): DeletePagePayload
  addPageElement(input: [AddPageElementInput!]!): AddPageElementPayload
  updatePageElement(input: UpdatePageElementInput!): UpdatePageElementPayload
  deletePageElement(filter: PageElementFilter!): DeletePageElementPayload
  addLibrary(input: [AddLibraryInput!]!): AddLibraryPayload
  updateLibrary(input: UpdateLibraryInput!): UpdateLibraryPayload
  deleteLibrary(filter: LibraryFilter!): DeleteLibraryPayload
  addComponent(input: [AddComponentInput!]!): AddComponentPayload
  updateComponent(input: UpdateComponentInput!): UpdateComponentPayload
  deleteComponent(filter: ComponentFilter!): DeleteComponentPayload
  addAtom(input: [AddAtomInput!]!): AddAtomPayload
  updateAtom(input: UpdateAtomInput!): UpdateAtomPayload
  deleteAtom(filter: AtomFilter!): DeleteAtomPayload
  addTag(input: [AddTagInput!]!): AddTagPayload
  updateTag(input: UpdateTagInput!): UpdateTagPayload
  deleteTag(filter: TagFilter!): DeleteTagPayload
  addSimpleType(input: [AddSimpleTypeInput!]!): AddSimpleTypePayload
  updateSimpleType(input: UpdateSimpleTypeInput!): UpdateSimpleTypePayload
  deleteSimpleType(filter: SimpleTypeFilter!): DeleteSimpleTypePayload
  addArrayType(input: [AddArrayTypeInput!]!): AddArrayTypePayload
  updateArrayType(input: UpdateArrayTypeInput!): UpdateArrayTypePayload
  deleteArrayType(filter: ArrayTypeFilter!): DeleteArrayTypePayload
  addEnumTypeValue(input: [AddEnumTypeValueInput!]!): AddEnumTypeValuePayload
  updateEnumTypeValue(
    input: UpdateEnumTypeValueInput!
  ): UpdateEnumTypeValuePayload
  deleteEnumTypeValue(filter: EnumTypeValueFilter!): DeleteEnumTypeValuePayload
  addEnumType(input: [AddEnumTypeInput!]!): AddEnumTypePayload
  updateEnumType(input: UpdateEnumTypeInput!): UpdateEnumTypePayload
  deleteEnumType(filter: EnumTypeFilter!): DeleteEnumTypePayload
  addInterface(input: [AddInterfaceInput!]!): AddInterfacePayload
  updateInterface(input: UpdateInterfaceInput!): UpdateInterfacePayload
  deleteInterface(filter: InterfaceFilter!): DeleteInterfacePayload
  updateType(input: UpdateTypeInput!): UpdateTypePayload
  deleteType(filter: TypeFilter!): DeleteTypePayload
  addRequiredValidator(
    input: [AddRequiredValidatorInput!]!
  ): AddRequiredValidatorPayload
  updateRequiredValidator(
    input: UpdateRequiredValidatorInput!
  ): UpdateRequiredValidatorPayload
  deleteRequiredValidator(
    filter: RequiredValidatorFilter!
  ): DeleteRequiredValidatorPayload
  addMinMaxValidator(
    input: [AddMinMaxValidatorInput!]!
  ): AddMinMaxValidatorPayload
  updateMinMaxValidator(
    input: UpdateMinMaxValidatorInput!
  ): UpdateMinMaxValidatorPayload
  deleteMinMaxValidator(
    filter: MinMaxValidatorFilter!
  ): DeleteMinMaxValidatorPayload
  addArrayLengthValidator(
    input: [AddArrayLengthValidatorInput!]!
  ): AddArrayLengthValidatorPayload
  updateArrayLengthValidator(
    input: UpdateArrayLengthValidatorInput!
  ): UpdateArrayLengthValidatorPayload
  deleteArrayLengthValidator(
    filter: ArrayLengthValidatorFilter!
  ): DeleteArrayLengthValidatorPayload
  addField(input: [AddFieldInput!]!): AddFieldPayload
  updateField(input: UpdateFieldInput!): UpdateFieldPayload
  deleteField(filter: FieldFilter!): DeleteFieldPayload
  addStringValue(input: [AddStringValueInput!]!): AddStringValuePayload
  updateStringValue(input: UpdateStringValueInput!): UpdateStringValuePayload
  deleteStringValue(filter: StringValueFilter!): DeleteStringValuePayload
  addIntValue(input: [AddIntValueInput!]!): AddIntValuePayload
  updateIntValue(input: UpdateIntValueInput!): UpdateIntValuePayload
  deleteIntValue(filter: IntValueFilter!): DeleteIntValuePayload
  addFloatValue(input: [AddFloatValueInput!]!): AddFloatValuePayload
  updateFloatValue(input: UpdateFloatValueInput!): UpdateFloatValuePayload
  deleteFloatValue(filter: FloatValueFilter!): DeleteFloatValuePayload
  addBooleanValue(input: [AddBooleanValueInput!]!): AddBooleanValuePayload
  updateBooleanValue(input: UpdateBooleanValueInput!): UpdateBooleanValuePayload
  deleteBooleanValue(filter: BooleanValueFilter!): DeleteBooleanValuePayload
  addArrayValue(input: [AddArrayValueInput!]!): AddArrayValuePayload
  updateArrayValue(input: UpdateArrayValueInput!): UpdateArrayValuePayload
  deleteArrayValue(filter: ArrayValueFilter!): DeleteArrayValuePayload
  addInterfaceValue(input: [AddInterfaceValueInput!]!): AddInterfaceValuePayload
  updateInterfaceValue(
    input: UpdateInterfaceValueInput!
  ): UpdateInterfaceValuePayload
  deleteInterfaceValue(
    filter: InterfaceValueFilter!
  ): DeleteInterfaceValuePayload
  addProp(input: [AddPropInput!]!): AddPropPayload
  updateProp(input: UpdatePropInput!): UpdatePropPayload
  deleteProp(filter: PropFilter!): DeletePropPayload
}

input NearFilter {
  distance: Float!
  coordinate: PointRef!
}

type Page {
  id: ID!
  name: String!
  app(filter: AppFilter): App!
  rootElement(filter: PageElementFilter): PageElement!
}

type PageAggregateResult {
  count: Int
  nameMin: String
  nameMax: String
}

type PageElement {
  id: ID!
  name: String!
  page(filter: PageFilter): Page!
  parent(filter: PageElementFilter): PageElement
  children(
    filter: PageElementFilter
    order: PageElementOrder
    first: Int
    offset: Int
  ): [PageElement]
  atom(filter: AtomFilter): Atom
  component(filter: ComponentFilter): Component
  props(filter: PropFilter, first: Int, offset: Int): [Prop!]!
  css: String
  childrenAggregate(filter: PageElementFilter): PageElementAggregateResult
  propsAggregate(filter: PropFilter): PropAggregateResult
}

type PageElementAggregateResult {
  count: Int
  nameMin: String
  nameMax: String
  cssMin: String
  cssMax: String
}

input PageElementFilter {
  id: [ID!]
  name: StringFullTextFilter_StringTermFilter
  has: [PageElementHasFilter]
  and: [PageElementFilter]
  or: [PageElementFilter]
  not: PageElementFilter
}

enum PageElementHasFilter {
  name
  page
  parent
  children
  atom
  component
  props
  css
}

input PageElementOrder {
  asc: PageElementOrderable
  desc: PageElementOrderable
  then: PageElementOrder
}

enum PageElementOrderable {
  name
  css
}

input PageElementPatch {
  name: String
  page: PageRef
  parent: PageElementRef
  children: [PageElementRef]
  atom: AtomRef
  component: ComponentRef
  props: [PropRef!]
  css: String
}

input PageElementRef {
  id: ID
  name: String
  page: PageRef
  parent: PageElementRef
  children: [PageElementRef]
  atom: AtomRef
  component: ComponentRef
  props: [PropRef!]
  css: String
}

input PageFilter {
  id: [ID!]
  name: StringFullTextFilter_StringTermFilter
  has: [PageHasFilter]
  and: [PageFilter]
  or: [PageFilter]
  not: PageFilter
}

enum PageHasFilter {
  name
  app
  rootElement
}

input PageOrder {
  asc: PageOrderable
  desc: PageOrderable
  then: PageOrder
}

enum PageOrderable {
  name
}

input PagePatch {
  name: String
  app: AppRef
  rootElement: PageElementRef
}

input PageRef {
  id: ID
  name: String
  app: AppRef
  rootElement: PageElementRef
}

type Point {
  longitude: Float!
  latitude: Float!
}

input PointGeoFilter {
  near: NearFilter
  within: WithinFilter
}

type PointList {
  points: [Point!]!
}

input PointListRef {
  points: [PointRef!]!
}

input PointRef {
  longitude: Float!
  latitude: Float!
}

type Polygon {
  coordinates: [PointList!]!
}

input PolygonGeoFilter {
  near: NearFilter
  within: WithinFilter
  contains: ContainsFilter
  intersects: IntersectsFilter
}

input PolygonRef {
  coordinates: [PointListRef!]!
}

enum PrimitiveType {
  String
  Integer
  Float
  Boolean
}

type Prop {
  id: ID!
  field(filter: FieldFilter): Field!
  value(filter: PropValueFilter): PropValue
  pageElement(filter: PageElementFilter): PageElement
}

type PropAggregateResult {
  count: Int
}

input PropFilter {
  id: [ID!]
  has: [PropHasFilter]
  and: [PropFilter]
  or: [PropFilter]
  not: PropFilter
}

enum PropHasFilter {
  field
  value
  pageElement
}

input PropPatch {
  field: FieldRef
  value: PropValueRef
  pageElement: PageElementRef
}

input PropRef {
  id: ID
  field: FieldRef
  value: PropValueRef
  pageElement: PageElementRef
}

union PropValue =
    StringValue
  | IntValue
  | FloatValue
  | BooleanValue
  | ArrayValue
  | InterfaceValue
  | EnumTypeValue

input PropValueFilter {
  memberTypes: [PropValueType!]
  stringValueFilter: StringValueFilter
  intValueFilter: IntValueFilter
  floatValueFilter: FloatValueFilter
  booleanValueFilter: BooleanValueFilter
  arrayValueFilter: ArrayValueFilter
  interfaceValueFilter: InterfaceValueFilter
  enumTypeValueFilter: EnumTypeValueFilter
}

input PropValueRef {
  stringValueRef: StringValueRef
  intValueRef: IntValueRef
  floatValueRef: FloatValueRef
  booleanValueRef: BooleanValueRef
  arrayValueRef: ArrayValueRef
  interfaceValueRef: InterfaceValueRef
  enumTypeValueRef: EnumTypeValueRef
}

enum PropValueType {
  StringValue
  IntValue
  FloatValue
  BooleanValue
  ArrayValue
  InterfaceValue
  EnumTypeValue
}

type Query {
  getApp(id: ID!): App
  queryApp(filter: AppFilter, order: AppOrder, first: Int, offset: Int): [App]
  aggregateApp(filter: AppFilter): AppAggregateResult
  getPage(id: ID!): Page
  queryPage(
    filter: PageFilter
    order: PageOrder
    first: Int
    offset: Int
  ): [Page]
  aggregatePage(filter: PageFilter): PageAggregateResult
  getPageElement(id: ID!): PageElement
  queryPageElement(
    filter: PageElementFilter
    order: PageElementOrder
    first: Int
    offset: Int
  ): [PageElement]
  aggregatePageElement(filter: PageElementFilter): PageElementAggregateResult
  getLibrary(id: ID!): Library
  queryLibrary(
    filter: LibraryFilter
    order: LibraryOrder
    first: Int
    offset: Int
  ): [Library]
  aggregateLibrary(filter: LibraryFilter): LibraryAggregateResult
  getComponent(id: ID!): Component
  queryComponent(
    filter: ComponentFilter
    order: ComponentOrder
    first: Int
    offset: Int
  ): [Component]
  aggregateComponent(filter: ComponentFilter): ComponentAggregateResult
  getAtom(id: ID!): Atom
  queryAtom(
    filter: AtomFilter
    order: AtomOrder
    first: Int
    offset: Int
  ): [Atom]
  aggregateAtom(filter: AtomFilter): AtomAggregateResult
  queryTag(filter: TagFilter, order: TagOrder, first: Int, offset: Int): [Tag]
  aggregateTag(filter: TagFilter): TagAggregateResult
  getSimpleType(id: ID!): SimpleType
  querySimpleType(
    filter: SimpleTypeFilter
    order: SimpleTypeOrder
    first: Int
    offset: Int
  ): [SimpleType]
  aggregateSimpleType(filter: SimpleTypeFilter): SimpleTypeAggregateResult
  getArrayType(id: ID!): ArrayType
  queryArrayType(
    filter: ArrayTypeFilter
    order: ArrayTypeOrder
    first: Int
    offset: Int
  ): [ArrayType]
  aggregateArrayType(filter: ArrayTypeFilter): ArrayTypeAggregateResult
  getEnumTypeValue(id: ID!): EnumTypeValue
  queryEnumTypeValue(
    filter: EnumTypeValueFilter
    order: EnumTypeValueOrder
    first: Int
    offset: Int
  ): [EnumTypeValue]
  aggregateEnumTypeValue(
    filter: EnumTypeValueFilter
  ): EnumTypeValueAggregateResult
  getEnumType(id: ID!): EnumType
  queryEnumType(
    filter: EnumTypeFilter
    order: EnumTypeOrder
    first: Int
    offset: Int
  ): [EnumType]
  aggregateEnumType(filter: EnumTypeFilter): EnumTypeAggregateResult
  getInterface(id: ID!): Interface
  queryInterface(
    filter: InterfaceFilter
    order: InterfaceOrder
    first: Int
    offset: Int
  ): [Interface]
  aggregateInterface(filter: InterfaceFilter): InterfaceAggregateResult
  getType(id: ID!): Type
  queryType(
    filter: TypeFilter
    order: TypeOrder
    first: Int
    offset: Int
  ): [Type]
  aggregateType(filter: TypeFilter): TypeAggregateResult
  getRequiredValidator(id: ID!): RequiredValidator
  queryRequiredValidator(
    filter: RequiredValidatorFilter
    first: Int
    offset: Int
  ): [RequiredValidator]
  aggregateRequiredValidator(
    filter: RequiredValidatorFilter
  ): RequiredValidatorAggregateResult
  getMinMaxValidator(id: ID!): MinMaxValidator
  queryMinMaxValidator(
    filter: MinMaxValidatorFilter
    order: MinMaxValidatorOrder
    first: Int
    offset: Int
  ): [MinMaxValidator]
  aggregateMinMaxValidator(
    filter: MinMaxValidatorFilter
  ): MinMaxValidatorAggregateResult
  getArrayLengthValidator(id: ID!): ArrayLengthValidator
  queryArrayLengthValidator(
    filter: ArrayLengthValidatorFilter
    order: ArrayLengthValidatorOrder
    first: Int
    offset: Int
  ): [ArrayLengthValidator]
  aggregateArrayLengthValidator(
    filter: ArrayLengthValidatorFilter
  ): ArrayLengthValidatorAggregateResult
  getField(id: ID!): Field
  queryField(
    filter: FieldFilter
    order: FieldOrder
    first: Int
    offset: Int
  ): [Field]
  aggregateField(filter: FieldFilter): FieldAggregateResult
  getStringValue(id: ID!): StringValue
  queryStringValue(
    filter: StringValueFilter
    order: StringValueOrder
    first: Int
    offset: Int
  ): [StringValue]
  aggregateStringValue(filter: StringValueFilter): StringValueAggregateResult
  getIntValue(id: ID!): IntValue
  queryIntValue(
    filter: IntValueFilter
    order: IntValueOrder
    first: Int
    offset: Int
  ): [IntValue]
  aggregateIntValue(filter: IntValueFilter): IntValueAggregateResult
  getFloatValue(id: ID!): FloatValue
  queryFloatValue(
    filter: FloatValueFilter
    order: FloatValueOrder
    first: Int
    offset: Int
  ): [FloatValue]
  aggregateFloatValue(filter: FloatValueFilter): FloatValueAggregateResult
  getBooleanValue(id: ID!): BooleanValue
  queryBooleanValue(
    filter: BooleanValueFilter
    first: Int
    offset: Int
  ): [BooleanValue]
  aggregateBooleanValue(filter: BooleanValueFilter): BooleanValueAggregateResult
  getArrayValue(id: ID!): ArrayValue
  queryArrayValue(
    filter: ArrayValueFilter
    first: Int
    offset: Int
  ): [ArrayValue]
  aggregateArrayValue(filter: ArrayValueFilter): ArrayValueAggregateResult
  getInterfaceValue(id: ID!): InterfaceValue
  queryInterfaceValue(
    filter: InterfaceValueFilter
    first: Int
    offset: Int
  ): [InterfaceValue]
  aggregateInterfaceValue(
    filter: InterfaceValueFilter
  ): InterfaceValueAggregateResult
  getProp(id: ID!): Prop
  queryProp(filter: PropFilter, first: Int, offset: Int): [Prop]
  aggregateProp(filter: PropFilter): PropAggregateResult
}

type RequiredValidator {
  id: ID!
  isRequired: Boolean!
}

type RequiredValidatorAggregateResult {
  count: Int
}

input RequiredValidatorFilter {
  id: [ID!]
  has: [RequiredValidatorHasFilter]
  and: [RequiredValidatorFilter]
  or: [RequiredValidatorFilter]
  not: RequiredValidatorFilter
}

enum RequiredValidatorHasFilter {
  isRequired
}

input RequiredValidatorPatch {
  isRequired: Boolean
}

input RequiredValidatorRef {
  id: ID
  isRequired: Boolean
}

type SimpleType implements Type {
  id: ID!
  name: String!
  primitiveType: PrimitiveType!
}

type SimpleTypeAggregateResult {
  count: Int
  nameMin: String
  nameMax: String
}

input SimpleTypeFilter {
  id: [ID!]
  has: [SimpleTypeHasFilter]
  and: [SimpleTypeFilter]
  or: [SimpleTypeFilter]
  not: SimpleTypeFilter
}

enum SimpleTypeHasFilter {
  name
  primitiveType
}

input SimpleTypeOrder {
  asc: SimpleTypeOrderable
  desc: SimpleTypeOrderable
  then: SimpleTypeOrder
}

enum SimpleTypeOrderable {
  name
}

input SimpleTypePatch {
  name: String
  primitiveType: PrimitiveType
}

input SimpleTypeRef {
  id: ID
  name: String
  primitiveType: PrimitiveType
}

input StringExactFilter {
  eq: String
  in: [String]
  le: String
  lt: String
  ge: String
  gt: String
  between: StringRange
}

input StringFullTextFilter {
  alloftext: String
  anyoftext: String
}

input StringFullTextFilter_StringHashFilter {
  alloftext: String
  anyoftext: String
  eq: String
  in: [String]
}

input StringFullTextFilter_StringTermFilter {
  alloftext: String
  anyoftext: String
  allofterms: String
  anyofterms: String
}

input StringHashFilter {
  eq: String
  in: [String]
}

input StringRange {
  min: String!
  max: String!
}

input StringRegExpFilter {
  regexp: String
}

input StringTermFilter {
  allofterms: String
  anyofterms: String
}

type StringValue {
  id: ID!
  stringValue: String!
}

type StringValueAggregateResult {
  count: Int
  stringValueMin: String
  stringValueMax: String
}

input StringValueFilter {
  id: [ID!]
  has: [StringValueHasFilter]
  and: [StringValueFilter]
  or: [StringValueFilter]
  not: StringValueFilter
}

enum StringValueHasFilter {
  stringValue
}

input StringValueOrder {
  asc: StringValueOrderable
  desc: StringValueOrderable
  then: StringValueOrder
}

enum StringValueOrderable {
  stringValue
}

input StringValuePatch {
  stringValue: String
}

input StringValueRef {
  id: ID
  stringValue: String
}

type Tag {
  label: String!
}

type TagAggregateResult {
  count: Int
  labelMin: String
  labelMax: String
}

input TagFilter {
  has: [TagHasFilter]
  and: [TagFilter]
  or: [TagFilter]
  not: TagFilter
}

enum TagHasFilter {
  label
}

input TagOrder {
  asc: TagOrderable
  desc: TagOrderable
  then: TagOrder
}

enum TagOrderable {
  label
}

input TagPatch {
  label: String
}

input TagRef {
  label: String
}

interface Type {
  id: ID!
  name: String!
}

type TypeAggregateResult {
  count: Int
  nameMin: String
  nameMax: String
}

input TypeFilter {
  id: [ID!]
  has: [TypeHasFilter]
  and: [TypeFilter]
  or: [TypeFilter]
  not: TypeFilter
}

enum TypeHasFilter {
  name
}

input TypeOrder {
  asc: TypeOrderable
  desc: TypeOrderable
  then: TypeOrder
}

enum TypeOrderable {
  name
}

input TypePatch {
  name: String
}

input TypeRef {
  id: ID!
}

union TypeUnion = Interface | EnumType | ArrayType | SimpleType

input TypeUnionFilter {
  memberTypes: [TypeUnionType!]
  interfaceFilter: InterfaceFilter
  enumTypeFilter: EnumTypeFilter
  arrayTypeFilter: ArrayTypeFilter
  simpleTypeFilter: SimpleTypeFilter
}

input TypeUnionRef {
  interfaceRef: InterfaceRef
  enumTypeRef: EnumTypeRef
  arrayTypeRef: ArrayTypeRef
  simpleTypeRef: SimpleTypeRef
}

enum TypeUnionType {
  Interface
  EnumType
  ArrayType
  SimpleType
}

input UpdateAppInput {
  filter: AppFilter!
  set: AppPatch
  remove: AppPatch
}

type UpdateAppPayload {
  app(filter: AppFilter, order: AppOrder, first: Int, offset: Int): [App]
  numUids: Int
}

input UpdateArrayLengthValidatorInput {
  filter: ArrayLengthValidatorFilter!
  set: ArrayLengthValidatorPatch
  remove: ArrayLengthValidatorPatch
}

type UpdateArrayLengthValidatorPayload {
  arrayLengthValidator(
    filter: ArrayLengthValidatorFilter
    order: ArrayLengthValidatorOrder
    first: Int
    offset: Int
  ): [ArrayLengthValidator]
  numUids: Int
}

input UpdateArrayTypeInput {
  filter: ArrayTypeFilter!
  set: ArrayTypePatch
  remove: ArrayTypePatch
}

type UpdateArrayTypePayload {
  arrayType(
    filter: ArrayTypeFilter
    order: ArrayTypeOrder
    first: Int
    offset: Int
  ): [ArrayType]
  numUids: Int
}

input UpdateArrayValueInput {
  filter: ArrayValueFilter!
  set: ArrayValuePatch
  remove: ArrayValuePatch
}

type UpdateArrayValuePayload {
  arrayValue(filter: ArrayValueFilter, first: Int, offset: Int): [ArrayValue]
  numUids: Int
}

input UpdateAtomInput {
  filter: AtomFilter!
  set: AtomPatch
  remove: AtomPatch
}

type UpdateAtomPayload {
  atom(filter: AtomFilter, order: AtomOrder, first: Int, offset: Int): [Atom]
  numUids: Int
}

input UpdateBooleanValueInput {
  filter: BooleanValueFilter!
  set: BooleanValuePatch
  remove: BooleanValuePatch
}

type UpdateBooleanValuePayload {
  booleanValue(
    filter: BooleanValueFilter
    first: Int
    offset: Int
  ): [BooleanValue]
  numUids: Int
}

input UpdateComponentInput {
  filter: ComponentFilter!
  set: ComponentPatch
  remove: ComponentPatch
}

type UpdateComponentPayload {
  component(
    filter: ComponentFilter
    order: ComponentOrder
    first: Int
    offset: Int
  ): [Component]
  numUids: Int
}

input UpdateEnumTypeInput {
  filter: EnumTypeFilter!
  set: EnumTypePatch
  remove: EnumTypePatch
}

type UpdateEnumTypePayload {
  enumType(
    filter: EnumTypeFilter
    order: EnumTypeOrder
    first: Int
    offset: Int
  ): [EnumType]
  numUids: Int
}

input UpdateEnumTypeValueInput {
  filter: EnumTypeValueFilter!
  set: EnumTypeValuePatch
  remove: EnumTypeValuePatch
}

type UpdateEnumTypeValuePayload {
  enumTypeValue(
    filter: EnumTypeValueFilter
    order: EnumTypeValueOrder
    first: Int
    offset: Int
  ): [EnumTypeValue]
  numUids: Int
}

input UpdateFieldInput {
  filter: FieldFilter!
  set: FieldPatch
  remove: FieldPatch
}

type UpdateFieldPayload {
  field(
    filter: FieldFilter
    order: FieldOrder
    first: Int
    offset: Int
  ): [Field]
  numUids: Int
}

input UpdateFloatValueInput {
  filter: FloatValueFilter!
  set: FloatValuePatch
  remove: FloatValuePatch
}

type UpdateFloatValuePayload {
  floatValue(
    filter: FloatValueFilter
    order: FloatValueOrder
    first: Int
    offset: Int
  ): [FloatValue]
  numUids: Int
}

input UpdateIntValueInput {
  filter: IntValueFilter!
  set: IntValuePatch
  remove: IntValuePatch
}

type UpdateIntValuePayload {
  intValue(
    filter: IntValueFilter
    order: IntValueOrder
    first: Int
    offset: Int
  ): [IntValue]
  numUids: Int
}

input UpdateInterfaceInput {
  filter: InterfaceFilter!
  set: InterfacePatch
  remove: InterfacePatch
}

type UpdateInterfacePayload {
  interface(
    filter: InterfaceFilter
    order: InterfaceOrder
    first: Int
    offset: Int
  ): [Interface]
  numUids: Int
}

input UpdateInterfaceValueInput {
  filter: InterfaceValueFilter!
  set: InterfaceValuePatch
  remove: InterfaceValuePatch
}

type UpdateInterfaceValuePayload {
  interfaceValue(
    filter: InterfaceValueFilter
    first: Int
    offset: Int
  ): [InterfaceValue]
  numUids: Int
}

input UpdateLibraryInput {
  filter: LibraryFilter!
  set: LibraryPatch
  remove: LibraryPatch
}

type UpdateLibraryPayload {
  library(
    filter: LibraryFilter
    order: LibraryOrder
    first: Int
    offset: Int
  ): [Library]
  numUids: Int
}

input UpdateMinMaxValidatorInput {
  filter: MinMaxValidatorFilter!
  set: MinMaxValidatorPatch
  remove: MinMaxValidatorPatch
}

type UpdateMinMaxValidatorPayload {
  minMaxValidator(
    filter: MinMaxValidatorFilter
    order: MinMaxValidatorOrder
    first: Int
    offset: Int
  ): [MinMaxValidator]
  numUids: Int
}

input UpdatePageElementInput {
  filter: PageElementFilter!
  set: PageElementPatch
  remove: PageElementPatch
}

type UpdatePageElementPayload {
  pageElement(
    filter: PageElementFilter
    order: PageElementOrder
    first: Int
    offset: Int
  ): [PageElement]
  numUids: Int
}

input UpdatePageInput {
  filter: PageFilter!
  set: PagePatch
  remove: PagePatch
}

type UpdatePagePayload {
  page(filter: PageFilter, order: PageOrder, first: Int, offset: Int): [Page]
  numUids: Int
}

input UpdatePropInput {
  filter: PropFilter!
  set: PropPatch
  remove: PropPatch
}

type UpdatePropPayload {
  prop(filter: PropFilter, first: Int, offset: Int): [Prop]
  numUids: Int
}

input UpdateRequiredValidatorInput {
  filter: RequiredValidatorFilter!
  set: RequiredValidatorPatch
  remove: RequiredValidatorPatch
}

type UpdateRequiredValidatorPayload {
  requiredValidator(
    filter: RequiredValidatorFilter
    first: Int
    offset: Int
  ): [RequiredValidator]
  numUids: Int
}

input UpdateSimpleTypeInput {
  filter: SimpleTypeFilter!
  set: SimpleTypePatch
  remove: SimpleTypePatch
}

type UpdateSimpleTypePayload {
  simpleType(
    filter: SimpleTypeFilter
    order: SimpleTypeOrder
    first: Int
    offset: Int
  ): [SimpleType]
  numUids: Int
}

input UpdateStringValueInput {
  filter: StringValueFilter!
  set: StringValuePatch
  remove: StringValuePatch
}

type UpdateStringValuePayload {
  stringValue(
    filter: StringValueFilter
    order: StringValueOrder
    first: Int
    offset: Int
  ): [StringValue]
  numUids: Int
}

input UpdateTagInput {
  filter: TagFilter!
  set: TagPatch
  remove: TagPatch
}

type UpdateTagPayload {
  tag(filter: TagFilter, order: TagOrder, first: Int, offset: Int): [Tag]
  numUids: Int
}

input UpdateTypeInput {
  filter: TypeFilter!
  set: TypePatch
  remove: TypePatch
}

type UpdateTypePayload {
  type(filter: TypeFilter, order: TypeOrder, first: Int, offset: Int): [Type]
  numUids: Int
}

input WithinFilter {
  polygon: PolygonRef!
}
