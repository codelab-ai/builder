# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
# https://circleci.com/docs/2.0/env-vars/#built-in-environment-variables

# Cypress issue
#
# https://stackoverflow.com/questions/62319657/how-to-resolve-the-cypress-npm-package-is-installed-but-the-cypress-binary-is

# Success notification is added to end of workflow, while failure notification is added to end of each job.

# filters-dev: &filters-dev
#   filters:
#     branches:
#       only: /^.*$/
#     tags:
#       ignore: /.*/

filters-staging-pr: &filters-staging-pr
  filters:
    branches:
      ignore: master

filters-staging-master: &filters-staging-master
  filters:
    branches:
      only: master

filters-prod: &filters-prod
  filters:
    tags:
      only: /^prod-.*$/
    branches:
      ignore: /.*/

# Workaround for the lack of logical "AND" for filters
filters-master-branch-only: &filters-master-branch-only
  when:
    and:
      - equal: [master, <<pipeline.git.branch>>]

executor-params: &executor-params
  parameters:
    e:
      type: executor
      default: machine-ubuntu
  executor: << parameters.e >>

executor-config: &executor-config
  environment:
    DOCKER_TAG_VERSION: 0.02
    # CircleCI
    GITHUB_LUAN: nutshell113
    SLACK_LUAN: U01EH265D5E
    GITHUB_ANTON_M: antonmihaylov
    SLACK_ANTON_M: U01HWRY2USE
    GITHUB_ANTON: artonio
    SLACK_ANTON: U01DSP39DME
    GITHUB_WEBBER: webberwang
    SLACK_WEBBER: U0J401GAH
    GITHUB_ALEX: aburtsev
    SLACK_ALEX: U01APQT5XCH
    SLACK_CHANNEL_UPDATE: CQVPNKS8K
    COLOR_SUCCESS: '#b7eb8f'
    COLOR_FAILURE: '#ffccc7'
    NODE_OPTIONS: --max_old_space_size=16384
    NODE_ENV: production
  working_directory: ~/project

version: 2.1

orbs:
  slack: circleci/slack@3.4.2
  cypress: cypress-io/cypress@1.28.0
  node: circleci/node@4.1.0

executors:
  machine-ubuntu:
    <<: *executor-config
    machine:
      docker_layer_caching: true
      image: ubuntu-2004:202010-01
    resource_class: medium
  docker-node:
    <<: *executor-config
    docker:
      - image: cimg/node:14.16.0-browsers
    # resource_class: medium
    resource_class: large
  docker-python:
    <<: *executor-config
    docker:
      - image: circleci/python:3.7
    resource_class: medium
  # vault-img:
  #   <<: *executor-config
  #   docker:
  #     - image: joatmon08/circleci-gcp-agent:287.0-1.14.72
  #   resource_class: small

commands:
  setup-env:
    description: 'Setup env'
    steps:
      - attach_workspace:
          at: ..
      # - run:
      #     name: 'Inject vault env to bash env'
      #     command: "cat ~/.env >> $BASH_ENV"
      - run:
          name: 'Install NVM'
          command: |
            # Set path before install, otherwise paths will be different in the executors
            echo 'export NODE_OPTIONS=$NODE_OPTIONS' >> $BASH_ENV
            source $BASH_ENV

            echo 'export NVM_DIR=$HOME/.nvm' >> $BASH_ENV
            echo 'source $NVM_DIR/nvm.sh' >> $BASH_ENV
            wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash
      - run:
          name: 'Setup env'
          command: |
            # node settings

            # git settings
            echo 'export GIT_COMMIT_MSG=$(git log --format="format:%s" -n 1 ${CIRCLE_SHA1})' >> $BASH_ENV

            # slack settings
            if [ $CIRCLE_USERNAME == $GITHUB_ANTON ]; then
              echo 'export SLACK_USER=${SLACK_ANTON}' >> $BASH_ENV
            elif [ $CIRCLE_USERNAME == $GITHUB_LUAN ]; then
              echo 'export SLACK_USER=${SLACK_LUAN}' >> $BASH_ENV
            elif [ $CIRCLE_USERNAME == $GITHUB_ANTON_M ]; then
              echo 'export SLACK_USER=${SLACK_ANTOM_M}' >> $BASH_ENV
            elif [ $CIRCLE_USERNAME == $GITHUB_ALEX ]; then
              echo 'export SLACK_USER=${SLACK_ALEX}' >> $BASH_ENV
            else
              echo 'export SLACK_USER=${SLACK_WEBBER}' >> $BASH_ENV
            fi

            # finally import bash env
            source $BASH_ENV
      - run:
          name: 'Set node version'
          command: |
            nvm install 14.16.0
            nvm alias default 14.16.0
            node -v

  setup-workspace:
    description: 'Setup workspace'
    steps:
      - checkout
      - setup-env
      # # We need this for `env-cmd -f .env` command
      # - attach_workspace:
      #     at: ..
      # - run: cp ~/.env .

  yarn-install-dev:
    steps:
      - restore_cache:
          name: 'Restore Yarn cache'
          keys:
            - dep-cache-staging-{{ checksum "yarn.lock" }}
            # https://discuss.circleci.com/t/circle-2-0-caching-is-too-limited-to-be-very-useful/11694
            - dep-cache-staging-
      - run:
          name: 'Install NPM packages'
          command: yarn install --frozen-lockfile --prod=false
      # - run:
      #     name: 'List Cypress cache'
      #     command: npx cypress cache path
      # - run:
      #     name: 'Remove NPM .cache'
      #     command: rm -rf ~/app/node_modules/.cache
  yarn-install-prod:
    description: 'Install prod dependencies'
    steps:
      - run:
          name: 'Install Yarn'
          command: npm install --global yarn
      - restore_cache:
          name: 'Restore Yarn cache'
          keys:
            - dep-cache-prod-{{ checksum "yarn.lock" }}
            - dep-cache-prod-
      - run:
          name: 'Install NPM packages'
          command: yarn install --frozen-lockfile --prod=true --ignore-scripts
      # - run:
      #     name: 'Remove NPM .cache'
      #     command: rm -rf ~/app/node_modules/.cache
      - save_cache:
          name: 'Save cache'
          key: dep-cache-prod-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
            - ~/.cache/Cypress
            # - ~/project/app/node_modules
            # - ~/project/app/apps/web/.next/cache

  notify-failure:
    steps:
      - slack/status:
          fail_only: true
          channel: $SLACK_CHANNEL_UPDATE
          mentions: $SLACK_USER

  setup-deploy:
    description: 'Setup deploy'
    steps:
      - setup-workspace
      - yarn-install-prod
      - run:
          name: Install dependencies
          command: |
            pip3 install awsebcli --upgrade --user
      - run:
          name: Create AWS credentials manually
          command: |
            mkdir ~/.aws
            touch ~/.aws/config
            chmod 600 ~/.aws/config
            echo "[profile eb-cli]" > ~/.aws/config
            echo "aws_access_key_id=$AWS_ACCESS_KEY" >> ~/.aws/config
            echo "aws_secret_access_key=$AWS_SECRET_KEY" >> ~/.aws/config

jobs:
  # setup-vault-env:
  #   <<: *executor-params
  #   description: 'Pull .env from vault server'
  #   steps:
  #     - checkout
  #     - run:
  #         name: 'Fetch .env'
  #         command: |
  #           echo $CI_VAULT_ROLE_ID > /tmp/role-id
  #           echo $CI_VAULT_SECRET_ID > /tmp/secret-id
  #           vault agent -address=$VAULT_ADDR -config=.vault/agent.hcl
  #     - persist_to_workspace:
  #         root: .
  #         paths:
  #           - .env

  install-and-build-workspace:
    <<: *executor-params
    steps:
      - setup-workspace
      - yarn-install-dev
      - run:
          name: 'Build CI'
          command: make build-ci
      # Save cache after checkout & building project
      - run: ls -al ~/project/apps/web
      - save_cache:
          name: 'Save cache'
          key: dep-cache-staging-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
            - ~/.cache/Cypress
            - ~/project/node_modules
            - ~/project/dist/apps/web/.next/cache
      - persist_to_workspace:
          root: ..
          paths:
            - project/node_modules
            - project/dist
            - .cache/Cypress
      - notify-failure

  lint:
    <<: *executor-params
    environment:
      CIRCLE_BASE_REVISION: <<pipeline.git.base_revision>>
    steps:
      - setup-workspace
      - run: make lint-eslint
      - run: make lint-commit-ci
      - notify-failure

  unit:
    <<: *executor-params
    steps:
      - setup-workspace
      - run: make unit-ci
      - notify-failure

  integration:
    <<: *executor-params
    steps:
      - setup-workspace
      - run: make integration-ci
      - notify-failure

  e2e:
    <<: *executor-params
    steps:
      - setup-workspace
      # - run: make e2e-ci
      - notify-failure

  notify-success:
    <<: *executor-params
    steps:
      - setup-env
      - slack/notify:
          channel: $SLACK_CHANNEL_UPDATE
          color: $COLOR_SUCCESS
          mentions: $SLACK_USER
          message: >
            *Status*: :white_check_mark: Success \n
            *Branch*: << pipeline.git.branch >> \n
            *Message*: $GIT_COMMIT_MSG \n

  build-and-push-docker-image:
    <<: *executor-params
    steps:
      - setup-workspace
      - yarn-install-prod
      - run:
          name: 'Build Docker image'
          command: |
            env >> .env
            yarn docker:build codelab
      - run:
          name: 'Docker login'
          command: echo "${DOCKER_PASS}" | docker login --username "${DOCKER_USER}" --password-stdin
      - run:
          name: 'Push Docker image'
          command: yarn docker:push codelab

  notify-failure:
    <<: *executor-params
    steps:
      - setup-env
      - slack/status:
          fail_only: true
          channel: $SLACK_CHANNEL_UPDATE
          mentions: $SLACK_USER

  deploy-to-ebs-staging:
    <<: *executor-params
    steps:
      - setup-deploy
      - run:
          name: Deploying to eb
          command: |
            # eb use app-staging --region ap-east-1 --profile eb-cli
            # eb deploy app-staging --region ap-east-1 --profile eb-cli

  deploy-to-ebs-prod:
    <<: *executor-params
    steps:
      - setup-deploy
      - run:
          name: Deploying to eb
          command: |
            # eb use app-prod --region ap-east-1 --profile eb-cli
            # eb deploy app-prod --region ap-east-1 --profile eb-cli

workflows:
  app-staging-pr:
    jobs:
      - install-and-build-workspace:
          <<: *filters-staging-pr
          e: docker-node
          context: CI
      - lint:
          <<: *filters-staging-pr
          e: docker-node
          context: CI
          requires:
            - install-and-build-workspace
      - unit:
          <<: *filters-staging-pr
          e: docker-node
          context: CI
          requires:
            - install-and-build-workspace
      - integration:
          <<: *filters-staging-pr
          e: docker-node
          context: CI
          requires:
            - install-and-build-workspace
      - cypress/run:
          <<: *filters-staging-pr
          executor: cypress/base-14
          # e: docker-node
          context: CI
          yarn: true
          requires:
            - install-and-build-workspace
          # record: true # record results on Cypress Dashboard
          parallel: true # split all specs across machines
          parallelism: 4 # use 4 CircleCI machines to finish quickly
          # group: 'all tests' # name this group "all tests" on the dashboard
          attach-workspace: true
          # working_directory: ~/app
          pre-steps:
            - checkout
          # wait-on: 'http://localhost:3001 http://localhost:4001'
          # start: make e2e-ci-start
          command: make e2e-ci
          # command: npx nx run web-e2e:e2e:ci
      # - e2e:
      #     <<: *filters-staging-pr
      #     e: docker-node
      #     context: CI
      #     requires:
      #       - sync-hasura
      #       # - install-and-build-workspace
      # - deploy-to-ebs-staging:
      #     <<: *filters-staging
      #     e: docker-python
      #     context: CI
      #     requires:
      #       - lint
      #       - unit
      #       - integration
      #       - e2e
      - notify-success:
          <<: *filters-staging-pr
          e: docker-node
          requires:
            - lint
            - unit
            - integration
            - cypress/run

  app-staging-master:
    jobs:
      - install-and-build-workspace:
          <<: *filters-staging-master
          e: docker-node
          context: CI
      - deploy-to-ebs-staging:
          <<: *filters-staging-master
          e: docker-python
          context: CI
          requires:
            - install-and-build-workspace
      - notify-success:
          <<: *filters-staging-master
          e: docker-node
          requires:
            - deploy-to-ebs-staging

  app-prod:
    jobs:
      - install-and-build-workspace:
          <<: *filters-prod
          e: docker-node
          context: CI
      - lint:
          <<: *filters-prod
          e: docker-node
          context: CI
          requires:
            - install-and-build-workspace
      - unit:
          <<: *filters-prod
          e: docker-node
          context: CI
          requires:
            - install-and-build-workspace
      - integration:
          <<: *filters-prod
          e: docker-node
          context: CI
          requires:
            - install-and-build-workspace
      - e2e:
          <<: *filters-prod
          e: docker-node
          context: CI
          requires:
            - install-and-build-workspace
        # first get the source code and install npm dependencies
        # - cypress/install:
        #     # run a custom app build step
        #     build: 'npm run build'
      - deploy-to-ebs-prod:
          <<: *filters-prod
          e: docker-python
          context: CI
          requires:
            - lint
            - unit
            - integration
            - e2e
      - notify-success:
          <<: *filters-prod
          e: docker-node
          requires:
            - deploy-to-ebs-prod
