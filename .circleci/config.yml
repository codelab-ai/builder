# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#

# Success notification is added to end of workflow, while failure notification is added to end of each job.

version: 2.1

orbs:
  slack: circleci/slack@3.4.2
  # node: circleci/node@3.0.1

executors:
  node:
    working_directory: ~/app
    environment:
      # install Cypress in Linux-like cache folder
      # CYPRESS_CACHE_FOLDER: '~/.cache/Cypress'
      NX_VERBOSE_LOGGING: true
      # GATSBY_TELEMETRY_DISABLED: 1
      # NODE_ENV: production
      SLACK_CHANNEL_UPDATE: CQVPNKS8K
      GITHUB_VIEN: VienNguyen24hdev
      SLACK_VIEN: UBPECLD4P
      GITHUB_WEBBER: webberwang
      SLACK_WEBBER: U0J401GAH
      GITHUB_ALEX: aburtsev
      SLACK_ALEX: U01APQT5XCH
      COLOR_SUCCESS: '#b7eb8f'
      COLOR_FAILURE: '#ffccc7'
      NODE_OPTIONS: --max_old_space_size=8192
    docker:
      - image: circleci/node:14-browsers
    resource_class: large
    # resource_class: medium+

commands:
  setup:
    description: 'Setup Context'
    steps:
      - checkout
      - run:
          name: 'Setup GIT_COMMIT_MSG'
          command: |
            echo 'export GIT_COMMIT_MSG=$(git log --format="format:%s" -n 1 ${CIRCLE_SHA1})' >> $BASH_ENV
            source $BASH_ENV
            echo $GIT_COMMIT_MSG
      - run:
          # Github user who triggered Circle is the slack mention user
          name: 'Setup SLACK_USER'
          command: |
            if [ $CIRCLE_USERNAME == $GITHUB_VIEN ]; then
              echo 'export SLACK_USER=${SLACK_VIEN}' >> $BASH_ENV
            elif [ $CIRCLE_USERNAME == $GITHUB_ALEX ]; then
              echo 'export SLACK_USER=${SLACK_ALEX}' >> $BASH_ENV
            else
              echo 'export SLACK_USER=${SLACK_WEBBER}' >> $BASH_ENV
            fi
            source $BASH_ENV
            echo $SLACK_USER


  # use this for jobs that require the repository
  setup-workspace:
    description: 'Setup Workspace'
    steps:
      - setup
      - attach_workspace:
          at: ..

  yarn-install:
    description: 'Install Dependencies'
    steps:
      - restore_cache:
          name: 'Restore Yarn Package Cache'
          keys:
            - dep-cache-{{ checksum "yarn.lock" }}
            # https://discuss.circleci.com/t/circle-2-0-caching-is-too-limited-to-be-very-useful/11694
            - dep-cache-
      - run:
          name: 'Install NPM Packages'
          command: yarn install --frozen-lockfile --non-interactive
      - save_cache:
          name: 'Save Cache'
          key: dep-cache-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
            - ~/app/node_modules

  build_app:
    description: 'Build Application'
    steps:
      - run:
          name: 'Build Packages'
          command: yarn build

  eslint:
    description: 'ESLint on New Commits'
    steps:
      - run: yarn eslint

  commitlint:
    description: 'Commitlint on New Commits'
    steps:
      - run: yarn commitlint

  unit-tests:
    description: 'Unit Tests'
    steps:
      - run: yarn test

  # webhook URL is setup using circleci integration
  notify-failure:
    steps:
      - slack/status:
          fail_only: true
          channel: $SLACK_CHANNEL_UPDATE
          mentions: $SLACK_USER

jobs:
  install-and-build:
    executor: node
    steps:
      - checkout
      - yarn-install
      - persist_to_workspace:
          root: ..
          paths:
            - app/node_modules
            - app/dist/libs/tools/eslint-config-codelab
      - notify-failure
  lint:
    environment:
      CIRCLE_COMPARE_URL: <<pipeline.project.git_url>>/compare/<<pipeline.git.base_revision>>..<<pipeline.git.revision>>
      CIRCLE_BASE_REVISION: <<pipeline.git.base_revision>>
      CIRCLE_REVISION: <<pipeline.git.revision>>
    executor: node
    steps:
      - run: echo "This is pipeline ID << pipeline.id >>"
      - run: echo $CIRCLE_COMPARE_URL
#      - setup-workspace
      - eslint
      - commitlint
      - notify-failure
  test:
    executor: node
    steps:
#      - setup-workspace
      - unit-tests
      - notify-failure
  notify-success:
    executor: node
    steps:
      - setup
      - slack/notify:
          channel: $SLACK_CHANNEL_UPDATE
          color: $COLOR_SUCCESS
          mentions: $SLACK_USER
          message: >
            *Status*: :white_check_mark: Success \n
            *Branch*: << pipeline.git.branch >> \n
            *Message*: $GIT_COMMIT_MSG \n
          # webhook URL is setup using circleci integration
  deploy-app:
    executor: node
    steps:
#      - setup-workspace
      - run:
          name: 'Build Production NPM'
          command: yarn install --frozen-lockfile --non-interactive --production=false
      - setup_remote_docker
      - run:
          description: "Build Docker Image"
          command: ./scripts/docker/build.sh
      - run:
          description: "Push Docker Image"
          command: ./scripts/docker/push.sh

  notify-failure:
    executor: node
    steps:
      - setup
      - slack/status:
          fail_only: true
          channel: $SLACK_CHANNEL_UPDATE
          # color: $COLOR_FAILURE
          mentions: $SLACK_USER
          # message: >
          #   *Status*: :red_circle: Failure \n
          #   *Branch*: << pipeline.git.branch >> \n
          #   *Message*: $GIT_COMMIT_MSG \n
workflows:
  check-app:
    jobs:
      - install-and-build
      - lint:
          pre-steps:
            - setup-workspace
            - run:
                description: 'Build Lint'
                command: ./scripts/lint/build.sh
          requires:
            - install-and-build
      - test:
          pre-steps:
            - setup-workspace
          requires:
            - install-and-build
      - notify-success:
          pre-steps:
            - setup-workspace
          requires:
            - lint
            - test
  deploy-app:
    jobs:
      - install-and-build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^deploy$/
      - lint:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^deploy$/
          pre-steps:
            - setup-workspace
            - run:
                description: 'Build Lint'
                command: ./scripts/lint/build.sh
          requires:
            - install-and-build
      - test:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^deploy$/
          pre-steps:
            - setup-workspace
          requires:
            - install-and-build
      - notify-success:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^deploy$/
          pre-steps:
            - setup-workspace
          requires:
            - lint
            - test
      - deploy-app:
          pre-steps:
            - setup-workspace
          requires:
            - notify-success
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^deploy$/

