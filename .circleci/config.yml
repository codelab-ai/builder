# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
# https://circleci.com/docs/2.0/env-vars/#built-in-environment-variables

# Cypress issue
#
# https://stackoverflow.com/questions/62319657/how-to-resolve-the-cypress-npm-package-is-installed-but-the-cypress-binary-is

# Success notification is added to end of workflow, while failure notification is added to end of each job.

filters-dev: &filters-dev
  filters:
    branches:
      only: /^.*$/
      ignore:
        - cicd/staging
    tags:
      ignore: /.*/

filters-staging: &filters-staging
# https://discuss.circleci.com/t/circle-2-0-workflow-filters-should-be-logical-and-not-or/18231
  filters:
    tags:
      only: /^staging-.*$/
    branches:
      only: 
        - cicd/staging
      # ignore: /.*/

# Workaround for the lack of logical "AND" for filters
filters-master-branch-only: &filters-master-branch-only
  when:
    and:
      - equal: [ master, <<pipeline.git.branch>> ]

executor-params: &executor-params
  parameters:
    e:
      type: executor
      default: machine-ubuntu
  executor: << parameters.e >>

executor-config: &executor-config
  environment:
    DOCKER_TAG_VERSION: 0.02
    # CircleCI
    GITHUB_LUAN: nutshell113
    SLACK_LUAN: U01EH265D5E
    GITHUB_ANTON_M: antonmihaylov
    SLACK_ANTON_M: U01HWRY2USE
    GITHUB_ANTON: artonio
    SLACK_ANTON: U01DSP39DME
    GITHUB_WEBBER: webberwang
    SLACK_WEBBER: U0J401GAH
    GITHUB_ALEX: aburtsev
    SLACK_ALEX: U01APQT5XCH
    SLACK_CHANNEL_UPDATE: CQVPNKS8K
    COLOR_SUCCESS: '#b7eb8f'
    COLOR_FAILURE: '#ffccc7'
    NODE_OPTIONS: --max_old_space_size=16384
    NODE_ENV: production
  working_directory: ~/app

version: 2.1

orbs:
  slack: circleci/slack@3.4.2
  cypress: cypress-io/cypress@1.26.0
  node: circleci/node@4.1.0
  eb: circleci/aws-elastic-beanstalk@1.0.2

executors:
  machine-ubuntu:
    <<: *executor-config
    machine:
      docker_layer_caching: true
      image: ubuntu-2004:202010-01
    resource_class: large
  docker-node:
    <<: *executor-config
    docker:
      - image: cimg/node:14.15.0-browsers
    resource_class: large
  vault-img:
    <<: *executor-config
    docker:
      - image: joatmon08/circleci-gcp-agent:287.0-1.14.72
    resource_class: small
  python:
    <<: *executor-config
    docker:
      - image: circleci/python:3.7

commands:
  setup-env:
    description: 'Setup env'
    steps:
      - attach_workspace:
          at: ..
      - run:
          name: 'Inject vault env to bash env'
          command: "cat ~/.env >> $BASH_ENV"
      - run:
          name: 'Install NVM'
          command: |
            # Set path before install, otherwise paths will be different in the executors
            echo 'export NODE_OPTIONS=$NODE_OPTIONS' >> $BASH_ENV
            source $BASH_ENV

            echo 'export NVM_DIR=$HOME/.nvm' >> $BASH_ENV
            echo 'source $NVM_DIR/nvm.sh' >> $BASH_ENV
            wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash
      - run:
          name: 'Setup env'
          command: |
            # node settings

            # git settings
            echo 'export GIT_COMMIT_MSG=$(git log --format="format:%s" -n 1 ${CIRCLE_SHA1})' >> $BASH_ENV

            # slack settings
            if [ $CIRCLE_USERNAME == $GITHUB_ANTON ]; then
              echo 'export SLACK_USER=${SLACK_ANTON}' >> $BASH_ENV
            elif [ $CIRCLE_USERNAME == $GITHUB_LUAN ]; then
              echo 'export SLACK_USER=${SLACK_LUAN}' >> $BASH_ENV
            elif [ $CIRCLE_USERNAME == $GITHUB_ANTON_M ]; then
              echo 'export SLACK_USER=${SLACK_ANTOM_M}' >> $BASH_ENV
            elif [ $CIRCLE_USERNAME == $GITHUB_ALEX ]; then
              echo 'export SLACK_USER=${SLACK_ALEX}' >> $BASH_ENV
            else
              echo 'export SLACK_USER=${SLACK_WEBBER}' >> $BASH_ENV
            fi

            # finally import bash env
            source $BASH_ENV
      - run:
          name: 'Set node version'
          command: |
            nvm install 14.13.0
            nvm alias default 14.13.0
            node -v

  setup-workspace:
    description: 'Setup workspace'
    steps:
      - checkout
      - setup-env
      # # We need this for `env-cmd -f .env` command
      # - attach_workspace:
      #     at: ..
      # - run: cp ~/.env .

  yarn-install-dev:
    steps:
      - restore_cache:
          name: 'Restore Yarn cache'
          keys:
            - dep-cache-dev-{{ checksum "yarn.lock" }}
            # https://discuss.circleci.com/t/circle-2-0-caching-is-too-limited-to-be-very-useful/11694
            - dep-cache-dev-
      - run:
          name: 'Install NPM packages'
          command: "yarn install --frozen-lockfile --prod=false"
      # - run:
      #     name: 'List Cypress cache'
      #     command: npx cypress cache path
      - run:
          name: 'Remove NPM .cache'
          command: rm -rf ~/app/node_modules/.cache
      - save_cache:
          name: 'Save cache'
          key: dep-cache-dev-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
            - ~/.cache/Cypress
            - ~/app/node_modules
            - ~/app/dist/apps/web/.next/cache

  yarn-install-prod:
    description: 'Install prod dependencies'
    steps:
      - restore_cache:
          name: 'Restore Yarn cache'
          keys:
            - dep-cache-prod-{{ checksum "yarn.lock" }}
            - dep-cache-prod-
      - run:
          name: 'Install NPM packages'
          command: yarn install --frozen-lockfile --prod=true
      - run:
          name: 'Remove NPM .cache'
          command: rm -rf ~/app/node_modules/.cache
      - save_cache:
          name: 'Save cache'
          key: dep-cache-prod-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
            - ~/.cache/Cypress
            - ~/app/node_modules
            - ~/app/dist/apps/web/.next/cache

  notify-failure:
    steps:
      - slack/status:
          fail_only: true
          channel: $SLACK_CHANNEL_UPDATE
          mentions: $SLACK_USER

jobs:
  setup-vault-env:
    <<: *executor-params
    description: 'Pull .env from vault server'
    steps:
      - checkout
      - run:
          name: "Fetch .env"
          command: |
            echo $CI_VAULT_ROLE_ID > /tmp/role-id
            echo $CI_VAULT_SECRET_ID > /tmp/secret-id
            vault agent -address=$VAULT_ADDR -config=.vault/agent.hcl
      - persist_to_workspace:
          root: .
          paths:
            - .env

  install-and-build-workspace:
    <<: *executor-params
    steps:
      - setup-workspace
      - yarn-install-dev
      - run:
          name: 'Build CI'
          command: make build-ci
      - run:
          name: 'Yarn link workspace'
          command: "yarn install --frozen-lockfile --prod=false"
      - persist_to_workspace:
          root: ..
          paths:
            - app/node_modules
            - app/dist
            - .cache/Cypress
      - notify-failure

  lint:
    <<: *executor-params
    environment:
      CIRCLE_BASE_REVISION: <<pipeline.git.base_revision>>
    steps:
      - setup-workspace
      - run: make lint-eslint
      - run: make lint-commit-ci
      - notify-failure

  unit:
    <<: *executor-params
    steps:
      - setup-workspace
      - run: make unit-ci
      - notify-failure

  integration:
    <<: *executor-params
    steps:
      - setup-workspace
      - run: make integration-ci
      - notify-failure

  e2e:
    <<: *executor-params
    steps:
      - setup-workspace
      - run: make e2e-ci
      - notify-failure

  notify-success:
    <<: *executor-params
    steps:
      - setup-env
      - slack/notify:
          channel: $SLACK_CHANNEL_UPDATE
          color: $COLOR_SUCCESS
          mentions: $SLACK_USER
          message: >
            *Status*: :white_check_mark: Success \n
            *Branch*: << pipeline.git.branch >> \n
            *Message*: $GIT_COMMIT_MSG \n

  build-and-push-docker-image:
    <<: *executor-params
    steps:
      - setup-workspace
      - yarn-install-prod
      - run:
          name: 'Build Docker image'
          command: |
            env >> .env
            yarn docker:build codelab
      - run:
          name: 'Docker login'
          command: echo "${DOCKER_PASS}" | docker login --username "${DOCKER_USER}" --password-stdin
      - run:
          name: 'Push Docker image'
          command: yarn docker:push codelab

  notify-failure:
    <<: *executor-params
    steps:
      - setup-env
      - slack/status:
          fail_only: true
          channel: $SLACK_CHANNEL_UPDATE
          mentions: $SLACK_USER

  deploy-to-ebs:
    <<: *executor-params
    steps:
      - setup-workspace
      - run:
          name: Install awscli
          command: |
            sudo pip install awsebcli --upgrade
      - run:
          name: Create AWS credentials manually
          command: |
            mkdir ~/.aws
            touch ~/.aws/credentials
            chmod 600 ~/.aws/credentials
            echo "[eb-cli]" >> ~/.aws/credentials
            echo "aws_access_key_id=$AWS_ACCESS_KEY_ID" >> ~/.aws/credentials
            echo "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials
      - run:
          name: Deploy to EB
          command: |
            eb use app-staging --profile eb-cli --region ap-east-1
            eb deploy -v --staged --profile eb-cli --region ap-east-1

workflows:
  app-dev:
    jobs:
      - setup-vault-env:
          <<: *filters-dev
          e: vault-img
      - install-and-build-workspace:
          <<: *filters-dev
          e: docker-node
          requires:
            - setup-vault-env
      - lint:
          <<: *filters-dev
          e: docker-node
          requires:
            - install-and-build-workspace
      - unit:
          <<: *filters-dev
          e: docker-node
          requires:
            - install-and-build-workspace
      - integration:
          <<: *filters-dev
          e: docker-node
          requires:
            - install-and-build-workspace
      - e2e:
          <<: *filters-dev
          e: docker-node
          requires:
            - install-and-build-workspace
      - notify-success:
          <<: *filters-dev
          e: docker-node
          requires:
            - lint
            - unit
            - integration
            - e2e

  app-staging:
    jobs:
      - setup-vault-env:
          <<: *filters-staging
          e: vault-img
      - install-and-build-workspace:
          <<: *filters-staging
          e: docker-node
          requires:
            - setup-vault-env
      - deploy-to-ebs:
          <<: *filters-staging
          e: python
          requires:
            - install-and-build-workspace
      - notify-success:
          <<: *filters-staging
          e: docker-node
          requires:
            - deploy-to-ebs
