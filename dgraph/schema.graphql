type User {
  id: ID!
  # Indexing with Custom Tokenizer
  email: String! @id @search(by: [hash])
  # user_id: String! @id
  apps: [App]
  libraries: [Library]
}
type App
  @auth(
    query: {
      rule: """
      query($USER: String!) {
        queryApp {
          owner(filter: { email: { eq: $USER }}) {
            id
          }
        }
      }
      """
    }
    # Only allows node to be created given this condition, meaning we'll have to have owner link set
    add: {
      rule: """
      query ($USER: String!) {
        queryApp {
          owner(filter: { email: { eq: $USER } } ) {
            id
          }
        }
      }
      """
    }
  ) {
  id: ID!
  owner: User! @hasInverse(field: "apps")
  pages: [Page]
  # id: String! @id
  name: String!
}

type Page {
  # @auth(
  # query: {
  #   rule: """
  #   query($USER: String!) {
  #    queryApp {
  #       owner(filter: { email: { eq: $USER }}) {
  #         __typename
  #       }
  #     }
  #   }
  #   """
  # }
  # )
  id: ID!
  title: String! @search(by: [term, fulltext])
  app: App @hasInverse(field: "pages")
}

type Library {
  id: ID!
  name: String!
  atoms: [Atom]
  components: [Component]
}

type Component {
  id: ID!
  label: String!
  # children: [Component]
  # atom: Atom
  library: Library! @hasInverse(field: "components")
  # tags: [Tag]
}

type Atom {
  id: ID!
  type: String!
  library: Library @hasInverse(field: "atoms")
  label: String!
  # components: [Component] @hasInverse(field: "atom")
}

type Tag {
  label: String!
}

type GetAllUsersPayload {
  id: ID!
  email: String
}

type Query {
  GetAllUsers: [GetAllUsersPayload]
    @custom(
      dql: """
      query {
        GetAllUsers(func: type(User)) {
          dgraph.type
          email: User.email
          id: uid
        }
      }
      """
    )
  userWhere(email: String!): User
    @custom(
      dql: """
      query user($email: string) {
        q(func: eq(User.email, $email)){
          email
          dgraph.type
          id: uid
        }
      }
      """
    )
  # query user {
  #      q(func: type(User)) @filter(eq(email, "webber@codelab.ai")) {
  #        dgraph.type
  #        id: uid
  #      }
  #    }
}

input UpsertUserInput {
  email: String!
}

# type Mutation {
# createApp(): App @custom(
#   dql: """
#   mutation {
#     _.app <

#   }
#   """
# )
# upsertUser(input: UpsertUserInput!): User
#   @custom(
#     dql: """
#     query {
#       v asq(func: eq(User.email: input.email)) {
#         v as uid
#         email
#       }
#     }
#     mutation @if(gt(len(v), 0)) {
#       _.user <email> input.email .
#       _.user <dgraph.type> "User .
#     }
#     """
#   )
# }

# Dgraph.Authorization {"VerificationKey":"-----BEGIN PUBLIC KEY-----\nMIIDCTCCAfGgAwIBAgIJG3k4ev/Q6Q/VMA0GCSqGSIb3DQEBCwUAMCIxIDAeBgNVBAMTF2NvZGVsYWItYWkudXMuYXV0aDAuY29tMB4XDTIxMDMyMDA4MDAzMloXDTM0MTEyNzA4MDAzMlowIjEgMB4GA1UEAxMXY29kZWxhYi1haS51cy5hdXRoMC5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCfUmz5CAL/xxzO5YICg/fVudRoW5SPA1b3H3r92IMets1/vl+3vhlrImOo+NzncKulTjY3uml18icHoM1F2/Oj/siG+KjZaYNoaVsJoNYQCktYB+lPazm9KpUDKVdOwh7TnSctblLBNHifyBSAQBmgm7ekU2OF5jU9A7Y7goo6X8h9wnkzsB8qlttNtonan70tsCRMyQ67VxPXvfnvTkPuCVp6tMozUdBTOqUgV0rTI2O+DyOK0SwCv8cyGBH3dfpJyP7OqMRPTa4AXgRrzobkOlaXewROSpT0SC93pWao5V6edUxxs6dhmjBiU1bEdorwf0uKJnIgWZwV6haIW/IbAgMBAAGjQjBAMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFBzGfNisR+V0sq+z+dyH20cgIos8MA4GA1UdDwEB/wQEAwIChDANBgkqhkiG9w0BAQsFAAOCAQEAbZjOWHzXbkGEat17G+f/G0FW+30CtWCSRk59wRGscofvfZ9/tB96l5eFCBQE2yBS48DcZbQ4ouT1QXvF5riuydI6k7rse5hsl2/pUdxWOue6+1lGqxzREIWU4UePSIC3hLxO2nb24dgYvYHDsWx46IWHANr6KRh2hDj+0LkJaoRdebdnbubKcb2svvlH+dYYseSb1OF2pbdQXjs7hiqWeyCgadIjM0MAkyiI3fHiH3yzURnLkbD6meeO1NLILmGaEvbCdB//JutP8vwokYxx3vXwjMIXA8chVfgyeUgy2o9eQh+oX1AH1tMsobwAsU4X3jWx52ACx7ygwEDAnRhG4g==\n-----END PUBLIC KEY-----","Header":"X-Auth-Token","Namespace":"https://dgraph.io/jwt/claims","Algo":"RS256","Audience":["nNN1GfrDp2S4Uj7yK5kxEcKjo1PFMwTI"]}
